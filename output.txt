Profiling did not work
Running main custom sequence...
==================================================
TEST ANALYSIS 
Target: A B C D E F G H I J
Current:  H I J A B F E D C G

==================================================
INITIAL SEQUENCE DEBUG:
Target:  A B C D E F G H I J
Current: H I J A B F E D C G
Initial movements:
  [0] H: pos=0, move=7, target=7
  [1] I: pos=1, move=7, target=8
  [2] J: pos=2, move=7, target=9
  [3] A: pos=3, move=-3, target=0
  [4] B: pos=4, move=-3, target=1
  [5] F: pos=5, move=0, target=5
  [6] E: pos=6, move=-2, target=4
  [7] D: pos=7, move=-4, target=3
  [8] C: pos=8, move=-6, target=2
  [9] G: pos=9, move=-3, target=6
==================================================

==================================================
SEQUENCE EVOLUTION ANALYSIS
==================================================

=== INITIAL STATE ===
Sequence: ['H', 'I', 'J', 'A', 'B', 'F', 'E', 'D', 'C', 'G']
Movements: ['+7', '+7', '+7', '-3', '-3', '+0', '-2', '-4', '-6', '-3']
🔍 DEBUG: iterative_detection called with 10 genes
🔍 DEBUG: First 10 genes in movement_sequence:
  [0]: H at pos=0, move=7, target=7
  [1]: I at pos=1, move=7, target=8
  [2]: J at pos=2, move=7, target=9
  [3]: A at pos=3, move=-3, target=0
  [4]: B at pos=4, move=-3, target=1
  [5]: F at pos=5, move=0, target=5
  [6]: E at pos=6, move=-2, target=4
  [7]: D at pos=7, move=-4, target=3
  [8]: C at pos=8, move=-6, target=2
  [9]: G at pos=9, move=-3, target=6
🔍 DEBUG: Focus genes found in input: ['H', 'I', 'J', 'A', 'B', 'F', 'E', 'D', 'C', 'G']
  H: pos=0, move=7, target=7
  I: pos=1, move=7, target=8
  J: pos=2, move=7, target=9
  A: pos=3, move=-3, target=0
  B: pos=4, move=-3, target=1
  F: pos=5, move=0, target=5
  E: pos=6, move=-2, target=4
  D: pos=7, move=-4, target=3
  C: pos=8, move=-6, target=2
  G: pos=9, move=-3, target=6
=== ALGORITHM DEBUG ===
Initial sequence length: 10
Initial total movement: 42
Non-zero movements: 9
Large movements (>10): 0 - sample: []
Sample movements:
  H: source=0, target=7, movement=7
  I: source=1, target=8, movement=7
  J: source=2, target=9, movement=7
========================
Starting optimized iterative detection with 10 genes
Iteration 1: Starting...
  DEBUG H - Iteration 1:
    Current position: 0
    Current movement: 7
    Target position: 7
    Distance to target: 7
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 0
   movement: 7
   target: 7
   distance_to_target: 7
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 1:
    Current position: 1
    Current movement: 7
    Target position: 8
    Distance to target: 7
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 1
   movement: 7
   target: 8
   distance_to_target: 7
    📉 DEGRADING (movement increased)
  DEBUG J - Iteration 1:
    Current position: 2
    Current movement: 7
    Target position: 9
    Distance to target: 7
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 2
   movement: 7
   target: 9
   distance_to_target: 7
    📉 DEGRADING (movement increased)
  DEBUG A - Iteration 1:
    Current position: 3
    Current movement: -3
    Target position: 0
    Distance to target: -3
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 3
   movement: -3
   target: 0
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  DEBUG B - Iteration 1:
    Current position: 4
    Current movement: -3
    Target position: 1
    Distance to target: -3
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 4
   movement: -3
   target: 1
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  DEBUG F - Iteration 1:
    Current position: 5
    Current movement: 0
    Target position: 5
    Distance to target: 0
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 5
   movement: 0
   target: 5
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG E - Iteration 1:
    Current position: 6
    Current movement: -2
    Target position: 4
    Distance to target: -2
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 6
   movement: -2
   target: 4
   distance_to_target: -2
    📉 DEGRADING (movement increased)
  DEBUG D - Iteration 1:
    Current position: 7
    Current movement: -4
    Target position: 3
    Distance to target: -4
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 7
   movement: -4
   target: 3
   distance_to_target: -4
    📉 DEGRADING (movement increased)
  DEBUG C - Iteration 1:
    Current position: 8
    Current movement: -6
    Target position: 2
    Distance to target: -6
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 8
   movement: -6
   target: 2
   distance_to_target: -6
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 1:
    Current position: 9
    Current movement: -3
    Target position: 6
    Distance to target: -3
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 1 start
   position: 9
   movement: -3
   target: 6
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  CONVERGENCE STATUS:
    Total movement: 42.00
    Non-zero movements: 9 (sample: [7, 7, 7, -3, -3])
    Large movements (|>2|): 8
    Sum of + movements: 21.00 (3 genes)
    Sum of - movements: 21.00 (6 genes)
    Movement balance: 0.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['H', 'I', 'J'] with movements [7, 7, 7]
    DEBUG: Testing segment [0-3]: ['H', 'I', 'J', 'A'] with movements [7, 7, 7, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+1) - checking further...
    DEBUG: Found transposition pattern [0-3]: ['H', 'I', 'J', 'A'] with movements [7, 7, 7, -3]
    DEBUG:   Magnitude: 21, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-4]: ['H', 'I', 'J', 'A', 'B'] with movements [7, 7, 7, -3, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Found transposition pattern [0-4]: ['H', 'I', 'J', 'A', 'B'] with movements [7, 7, 7, -3, -3]
    DEBUG:   Magnitude: 21, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-5]: ['H', 'I', 'J', 'A', 'B', 'F'] with movements [7, 7, 7, -3, -3, 0]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Found transposition pattern [0-5]: ['H', 'I', 'J', 'A', 'B', 'F'] with movements [7, 7, 7, -3, -3, 0]
    DEBUG:   Magnitude: 21, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-6]: ['H', 'I', 'J', 'A', 'B', 'F', 'E'] with movements [7, 7, 7, -3, -3, 0, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [0-7]: ['H', 'I', 'J', 'A', 'B', 'F', 'E', 'D'] with movements [7, 7, 7, -3, -3, 0, -2, -4]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7, 7], Negative section: [-3, -3, -2, -4]
    DEBUG: Testing segment [0-8]: ['H', 'I', 'J', 'A', 'B', 'F', 'E', 'D', 'C'] with movements [7, 7, 7, -3, -3, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (3+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7, 7], Negative section: [-3, -3, -2, -4, -6]
    DEBUG: Testing segment [0-9]: ['H', 'I', 'J', 'A', 'B', 'F', 'E', 'D', 'C', 'G'] with movements [7, 7, 7, -3, -3, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+6) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7, 7], Negative section: [-3, -3, -2, -4, -6, -3]
    DEBUG: Testing segment [1-3]: ['I', 'J', 'A'] with movements [7, 7, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [1-3]: ['I', 'J', 'A'] with movements [7, 7, -3]
    DEBUG:   Magnitude: 14, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-4]: ['I', 'J', 'A', 'B'] with movements [7, 7, -3, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [1-5]: ['I', 'J', 'A', 'B', 'F'] with movements [7, 7, -3, -3, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [1-6]: ['I', 'J', 'A', 'B', 'F', 'E'] with movements [7, 7, -3, -3, 0, -2]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7], Negative section: [-3, -3, -2]
    DEBUG: Testing segment [1-7]: ['I', 'J', 'A', 'B', 'F', 'E', 'D'] with movements [7, 7, -3, -3, 0, -2, -4]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7], Negative section: [-3, -3, -2, -4]
    DEBUG: Testing segment [1-8]: ['I', 'J', 'A', 'B', 'F', 'E', 'D', 'C'] with movements [7, 7, -3, -3, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (2+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7], Negative section: [-3, -3, -2, -4, -6]
    DEBUG: Testing segment [1-9]: ['I', 'J', 'A', 'B', 'F', 'E', 'D', 'C', 'G'] with movements [7, 7, -3, -3, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+6) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7, 7], Negative section: [-3, -3, -2, -4, -6, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-4]: ['J', 'A', 'B'] with movements [7, -3, -3]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [2-4]: ['J', 'A', 'B'] with movements [7, -3, -3]
    DEBUG:   Magnitude: 7, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-5]: ['J', 'A', 'B', 'F'] with movements [7, -3, -3, 0]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [2-5]: ['J', 'A', 'B', 'F'] with movements [7, -3, -3, 0]
    DEBUG:   Magnitude: 7, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-6]: ['J', 'A', 'B', 'F', 'E'] with movements [7, -3, -3, 0, -2]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7], Negative section: [-3, -3, -2]
    DEBUG: Testing segment [2-7]: ['J', 'A', 'B', 'F', 'E', 'D'] with movements [7, -3, -3, 0, -2, -4]
    DEBUG: ✅ Non-symmetrical segment count (1+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7], Negative section: [-3, -3, -2, -4]
    DEBUG: Testing segment [2-8]: ['J', 'A', 'B', 'F', 'E', 'D', 'C'] with movements [7, -3, -3, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (1+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7], Negative section: [-3, -3, -2, -4, -6]
    DEBUG: Testing segment [2-9]: ['J', 'A', 'B', 'F', 'E', 'D', 'C', 'G'] with movements [7, -3, -3, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (1+6) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [7], Negative section: [-3, -3, -2, -4, -6, -3]
    DEBUG: Testing segment [3-5]: ['A', 'B', 'F'] with movements [-3, -3, 0]
    DEBUG: Testing segment [3-6]: ['A', 'B', 'F', 'E'] with movements [-3, -3, 0, -2]
    DEBUG: Testing segment [3-7]: ['A', 'B', 'F', 'E', 'D'] with movements [-3, -3, 0, -2, -4]
    DEBUG: Testing segment [3-8]: ['A', 'B', 'F', 'E', 'D', 'C'] with movements [-3, -3, 0, -2, -4, -6]
    DEBUG: Testing segment [3-9]: ['A', 'B', 'F', 'E', 'D', 'C', 'G'] with movements [-3, -3, 0, -2, -4, -6, -3]
    DEBUG: Testing segment [4-6]: ['B', 'F', 'E'] with movements [-3, 0, -2]
    DEBUG: Testing segment [4-7]: ['B', 'F', 'E', 'D'] with movements [-3, 0, -2, -4]
    DEBUG: Testing segment [4-8]: ['B', 'F', 'E', 'D', 'C'] with movements [-3, 0, -2, -4, -6]
    DEBUG: Testing segment [4-9]: ['B', 'F', 'E', 'D', 'C', 'G'] with movements [-3, 0, -2, -4, -6, -3]
    DEBUG: Testing segment [5-7]: ['F', 'E', 'D'] with movements [0, -2, -4]
    DEBUG: Testing segment [5-8]: ['F', 'E', 'D', 'C'] with movements [0, -2, -4, -6]
    DEBUG: Testing segment [5-9]: ['F', 'E', 'D', 'C', 'G'] with movements [0, -2, -4, -6, -3]
    DEBUG: Testing segment [6-8]: ['E', 'D', 'C'] with movements [-2, -4, -6]
    DEBUG: Testing segment [6-9]: ['E', 'D', 'C', 'G'] with movements [-2, -4, -6, -3]
    DEBUG: Testing segment [7-9]: ['D', 'C', 'G'] with movements [-4, -6, -3]
    DEBUG: Found 6 total transposition patterns
    DEBUG: Pattern 1: [0-3] magnitude=21, perfect=False
    DEBUG: Pattern 2: [0-4] magnitude=21, perfect=False
    DEBUG: Pattern 3: [0-5] magnitude=21, perfect=False
    DEBUG: Pattern 4: [1-3] magnitude=14, perfect=False
    DEBUG: Pattern 5: [2-4] magnitude=7, perfect=False
    DEBUG: Pattern 6: [2-5] magnitude=7, perfect=False
  Found 6 transposition patterns
    DEBUG: Finding contiguity resolution for pattern with magnitude 21
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-3], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 21
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-4], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 21
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 14
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-3], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 7
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-4], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 7
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3, -3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3, -3, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3, -3, 0, -2]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3, -3, 0, -2, -4]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3, -3, 0, -2, -4, -6]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, 7, -3, -3, 0, -2, -4, -6, -3]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3, -3, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3, -3, 0, -2]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3, -3, 0, -2, -4]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3, -3, 0, -2, -4, -6]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 7, -3, -3, 0, -2, -4, -6, -3]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3, -3, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3, -3, 0, -2]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3, -3, 0, -2, -4]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3, -3, 0, -2, -4, -6]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, -3, -3, 0, -2, -4, -6, -3]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, -3]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, -3, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, -3, 0, -2]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, -3, 0, -2, -4]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, -3, 0, -2, -4, -6]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, -3, 0, -2, -4, -6, -3]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, 0, -2]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, 0, -2, -4]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, 0, -2, -4, -6]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-3, 0, -2, -4, -6, -3]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, -4]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, -4, -6]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, -4, -6, -3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, -4]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, -4, -6]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, -4, -6, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-4, -6]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-4, -6, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-6, -3]
     Length: 2
  Found 2 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene H at index 0: position=0, movement=7, target=7
   Found focus gene I at index 1: position=1, movement=7, target=8
   Found focus gene J at index 2: position=2, movement=7, target=9
   Found focus gene A at index 3: position=3, movement=-3, target=0
   Found focus gene B at index 4: position=4, movement=-3, target=1
   Found focus gene F at index 5: position=5, movement=0, target=5
   Found focus gene E at index 6: position=6, movement=-2, target=4
   Found focus gene D at index 7: position=7, movement=-4, target=3
   Found focus gene C at index 8: position=8, movement=-6, target=2
   Found focus gene G at index 9: position=9, movement=-3, target=6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: H
   movement1: 7
   gene2: I
   movement2: 7
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: I
   movement1: 7
   gene2: J
   movement2: 7
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: J
   movement1: 7
   gene2: A
   movement2: -3
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: J(7) <-> A(-3)
   J would move from pos 2 to pos 3
   A would move from pos 3 to pos 2
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 2
   gene1: J
   movement1: 7
   gene2: A
   movement2: -3
🔍 FOCUS GENE ADJACENCY SELECTED: J(7) <-> A(-3) at indices 2-3
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: A
   movement1: -3
   gene2: B
   movement2: -3
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: B
   movement1: -3
   gene2: F
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: F
   movement1: 0
   gene2: E
   movement2: -2
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: E
   movement1: -2
   gene2: D
   movement2: -4
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: D
   movement1: -4
   gene2: C
   movement2: -6
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: C
   movement1: -6
   gene2: G
   movement2: -3
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 1
  Found 1 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(1, 4, 2), (2, 3, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(1, 4, 2), (2, 3, 1)]
  DEBUG: Processing flip pattern 1-4 (size: 2)
  DEBUG: Flip 1-4 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(1, 4)}
  DEBUG: Processing flip pattern 2-3 (size: 1)
  DEBUG: Flip 2-3 overlaps with 1-4
  DEBUG: Flip 2-3 REJECTED - overlap detected
  DEBUG: find_non_overlapping_flips - Final result: [(1, 4, 2)]
  Non-overlapping flips: 1
  DEBUG: Testing 1 flips for biological validity...
  FLIP BEFORE: [('I', 7), ('J', 7), ('A', -3), ('B', -3)]
  🔍 SEQUENCE DEBUG - Segment [1-4]:
     Segment length: 4
     All genes in segment:
       [1]: I at pos=1, move=7, target=8 🔍
       [2]: J at pos=2, move=7, target=9 🔍
       [3]: A at pos=3, move=-3, target=0 🔍
       [4]: B at pos=4, move=-3, target=1 🔍
     🔍 FOCUS GENES in this segment: ['I', 'J', 'A', 'B']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [1-4]: 4 genes
     Magnitude before: 20
     Individual movements: [('I', 7), ('J', 7), ('A', -3), ('B', -3)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      B: -3 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: B
   Position: 1 → 1
   Movement: -3 → 0
   Target: 1
   Context: flip[1-4]
   Progress: 0/0 units remaining
      A: -3 → -2 (|-2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: A
   Position: 2 → 2
   Movement: -3 → -2
   Target: 0
   Context: flip[1-4]
   Progress: 2/2 units remaining
      J: 7 → 6 (|6| = 6)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 3 → 3
   Movement: 7 → 6
   Target: 9
   Context: flip[1-4]
   Progress: 6/6 units remaining
      I: 7 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 4 → 4
   Movement: 7 → 4
   Target: 8
   Context: flip[1-4]
   Progress: 4/4 units remaining
     Magnitude after: 12
     Magnitude change: -8
  FLIP AFTER:  [('B', 0), ('A', -2), ('J', 6), ('I', 4)]
    Flip accepted: 42 -> 34
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 6 segment overlaps found:
       - I vs J: overlap at [2-8]
         (flip[1:4] conflicts with flip[1:4])
       - I vs A: overlap at [1-3]
         (flip[1:4] conflicts with flip[1:4])
       - I vs B: overlap at [1-4]
         (flip[1:4] conflicts with flip[1:4])
       - J vs A: overlap at [2-3]
         (flip[1:4] conflicts with flip[1:4])
       - J vs B: overlap at [2-4]
         (flip[1:4] conflicts with flip[1:4])
       - A vs B: overlap at [1-3]
         (flip[1:4] conflicts with flip[1:4])
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 6 segment overlaps found:
       - I vs J: overlap at [2-8]
         (flip[1:4] conflicts with flip[1:4])
       - I vs A: overlap at [1-3]
         (flip[1:4] conflicts with flip[1:4])
       - I vs B: overlap at [1-4]
         (flip[1:4] conflicts with flip[1:4])
       - J vs A: overlap at [2-3]
         (flip[1:4] conflicts with flip[1:4])
       - J vs B: overlap at [2-4]
         (flip[1:4] conflicts with flip[1:4])
       - A vs B: overlap at [1-3]
         (flip[1:4] conflicts with flip[1:4])
  🔄 SEQUENTIAL FALLBACK: Applying 1 interdependent flips one by one
    Step 1/1: Applying (1, 4, 2)
  FLIP BEFORE: [('I', 7), ('J', 7), ('A', -3), ('B', -3)]
  🔍 SEQUENCE DEBUG - Segment [1-4]:
     Segment length: 4
     All genes in segment:
       [1]: I at pos=1, move=7, target=8 🔍
       [2]: J at pos=2, move=7, target=9 🔍
       [3]: A at pos=3, move=-3, target=0 🔍
       [4]: B at pos=4, move=-3, target=1 🔍
     🔍 FOCUS GENES in this segment: ['I', 'J', 'A', 'B']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [1-4]: 4 genes
     Magnitude before: 20
     Individual movements: [('I', 7), ('J', 7), ('A', -3), ('B', -3)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      B: -3 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: B
   Position: 1 → 1
   Movement: -3 → 0
   Target: 1
   Context: flip[1-4]
   Progress: 0/0 units remaining
      A: -3 → -2 (|-2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: A
   Position: 2 → 2
   Movement: -3 → -2
   Target: 0
   Context: flip[1-4]
   Progress: 2/2 units remaining
      J: 7 → 6 (|6| = 6)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 3 → 3
   Movement: 7 → 6
   Target: 9
   Context: flip[1-4]
   Progress: 6/6 units remaining
      I: 7 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 4 → 4
   Movement: 7 → 4
   Target: 8
   Context: flip[1-4]
   Progress: 4/4 units remaining
     Magnitude after: 12
     Magnitude change: -8
  FLIP AFTER:  [('B', 0), ('A', -2), ('J', 6), ('I', 4)]
  Applied 1 flip inversions
Iteration 1: Applied 1 inversions
  Movement recalculation completed
Iteration 2: Starting...
  DEBUG H - Iteration 2:
    Current position: 0
    Current movement: 7
    Target position: 7
    Distance to target: 7
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 0
   movement: 7
   target: 7
   distance_to_target: 7
    📉 DEGRADING (movement increased)
  DEBUG B - Iteration 2:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG A - Iteration 2:
    Current position: 2
    Current movement: -2
    Target position: 0
    Distance to target: -2
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 2
   movement: -2
   target: 0
   distance_to_target: -2
    📉 DEGRADING (movement increased)
  DEBUG J - Iteration 2:
    Current position: 3
    Current movement: 6
    Target position: 9
    Distance to target: 6
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 3
   movement: 6
   target: 9
   distance_to_target: 6
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 2:
    Current position: 4
    Current movement: 4
    Target position: 8
    Distance to target: 4
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 4
   movement: 4
   target: 8
   distance_to_target: 4
    📉 DEGRADING (movement increased)
  DEBUG F - Iteration 2:
    Current position: 5
    Current movement: 0
    Target position: 5
    Distance to target: 0
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 5
   movement: 0
   target: 5
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG E - Iteration 2:
    Current position: 6
    Current movement: -2
    Target position: 4
    Distance to target: -2
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 6
   movement: -2
   target: 4
   distance_to_target: -2
    📉 DEGRADING (movement increased)
  DEBUG D - Iteration 2:
    Current position: 7
    Current movement: -4
    Target position: 3
    Distance to target: -4
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 7
   movement: -4
   target: 3
   distance_to_target: -4
    📉 DEGRADING (movement increased)
  DEBUG C - Iteration 2:
    Current position: 8
    Current movement: -6
    Target position: 2
    Distance to target: -6
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 8
   movement: -6
   target: 2
   distance_to_target: -6
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 2:
    Current position: 9
    Current movement: -3
    Target position: 6
    Distance to target: -3
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 2 start
   position: 9
   movement: -3
   target: 6
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  CONVERGENCE STATUS:
    Total movement: 34.00
    Non-zero movements: 8 (sample: [7, -2, 6, 4, -2])
    Large movements (|>2|): 6
    Sum of + movements: 17.00 (3 genes)
    Sum of - movements: 17.00 (5 genes)
    Movement balance: 0.00
    Movement reduction: 8.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['H', 'B', 'A'] with movements [7, 0, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-3]: ['H', 'B', 'A', 'J'] with movements [7, 0, -2, 6]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [7, 6], Negative section: [-2]
    DEBUG: Testing segment [0-4]: ['H', 'B', 'A', 'J', 'I'] with movements [7, 0, -2, 6, 4]
    DEBUG: ✅ Non-symmetrical segment count (3+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [7, 6, 4], Negative section: [-2]
    DEBUG: Testing segment [0-5]: ['H', 'B', 'A', 'J', 'I', 'F'] with movements [7, 0, -2, 6, 4, 0]
    DEBUG: ✅ Non-symmetrical segment count (3+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [7, 6, 4], Negative section: [-2]
    DEBUG: Testing segment [0-6]: ['H', 'B', 'A', 'J', 'I', 'F', 'E'] with movements [7, 0, -2, 6, 4, 0, -2]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [7, 6, 4], Negative section: [-2, -2]
    DEBUG: Testing segment [0-7]: ['H', 'B', 'A', 'J', 'I', 'F', 'E', 'D'] with movements [7, 0, -2, 6, 4, 0, -2, -4]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [0-8]: ['H', 'B', 'A', 'J', 'I', 'F', 'E', 'D', 'C'] with movements [7, 0, -2, 6, 4, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [7, 6, 4], Negative section: [-2, -2, -4, -6]
    DEBUG: Testing segment [0-9]: ['H', 'B', 'A', 'J', 'I', 'F', 'E', 'D', 'C', 'G'] with movements [7, 0, -2, 6, 4, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [7, 6, 4], Negative section: [-2, -2, -4, -6, -3]
    DEBUG: Testing segment [1-3]: ['B', 'A', 'J'] with movements [0, -2, 6]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-4]: ['B', 'A', 'J', 'I'] with movements [0, -2, 6, 4]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [6, 4], Negative section: [-2]
    DEBUG: Testing segment [1-5]: ['B', 'A', 'J', 'I', 'F'] with movements [0, -2, 6, 4, 0]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [6, 4], Negative section: [-2]
    DEBUG: Testing segment [1-6]: ['B', 'A', 'J', 'I', 'F', 'E'] with movements [0, -2, 6, 4, 0, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [1-7]: ['B', 'A', 'J', 'I', 'F', 'E', 'D'] with movements [0, -2, 6, 4, 0, -2, -4]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -2, -4]
    DEBUG: Testing segment [1-8]: ['B', 'A', 'J', 'I', 'F', 'E', 'D', 'C'] with movements [0, -2, 6, 4, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -2, -4, -6]
    DEBUG: Testing segment [1-9]: ['B', 'A', 'J', 'I', 'F', 'E', 'D', 'C', 'G'] with movements [0, -2, 6, 4, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -2, -4, -6, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-4]: ['A', 'J', 'I'] with movements [-2, 6, 4]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [6, 4], Negative section: [-2]
    DEBUG: Testing segment [2-5]: ['A', 'J', 'I', 'F'] with movements [-2, 6, 4, 0]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [6, 4], Negative section: [-2]
    DEBUG: Testing segment [2-6]: ['A', 'J', 'I', 'F', 'E'] with movements [-2, 6, 4, 0, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [2-7]: ['A', 'J', 'I', 'F', 'E', 'D'] with movements [-2, 6, 4, 0, -2, -4]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -2, -4]
    DEBUG: Testing segment [2-8]: ['A', 'J', 'I', 'F', 'E', 'D', 'C'] with movements [-2, 6, 4, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -2, -4, -6]
    DEBUG: Testing segment [2-9]: ['A', 'J', 'I', 'F', 'E', 'D', 'C', 'G'] with movements [-2, 6, 4, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -2, -4, -6, -3]
    DEBUG: Testing segment [3-5]: ['J', 'I', 'F'] with movements [6, 4, 0]
    DEBUG: Testing segment [3-6]: ['J', 'I', 'F', 'E'] with movements [6, 4, 0, -2]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [6, 4], Negative section: [-2]
    DEBUG: Testing segment [3-7]: ['J', 'I', 'F', 'E', 'D'] with movements [6, 4, 0, -2, -4]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [3-8]: ['J', 'I', 'F', 'E', 'D', 'C'] with movements [6, 4, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -4, -6]
    DEBUG: Testing segment [3-9]: ['J', 'I', 'F', 'E', 'D', 'C', 'G'] with movements [6, 4, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [6, 4], Negative section: [-2, -4, -6, -3]
    DEBUG: Testing segment [4-6]: ['I', 'F', 'E'] with movements [4, 0, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [4-7]: ['I', 'F', 'E', 'D'] with movements [4, 0, -2, -4]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [4], Negative section: [-2, -4]
    DEBUG: Testing segment [4-8]: ['I', 'F', 'E', 'D', 'C'] with movements [4, 0, -2, -4, -6]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [4], Negative section: [-2, -4, -6]
    DEBUG: Testing segment [4-9]: ['I', 'F', 'E', 'D', 'C', 'G'] with movements [4, 0, -2, -4, -6, -3]
    DEBUG: ✅ Non-symmetrical segment count (1+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [4], Negative section: [-2, -4, -6, -3]
    DEBUG: Testing segment [5-7]: ['F', 'E', 'D'] with movements [0, -2, -4]
    DEBUG: Testing segment [5-8]: ['F', 'E', 'D', 'C'] with movements [0, -2, -4, -6]
    DEBUG: Testing segment [5-9]: ['F', 'E', 'D', 'C', 'G'] with movements [0, -2, -4, -6, -3]
    DEBUG: Testing segment [6-8]: ['E', 'D', 'C'] with movements [-2, -4, -6]
    DEBUG: Testing segment [6-9]: ['E', 'D', 'C', 'G'] with movements [-2, -4, -6, -3]
    DEBUG: Testing segment [7-9]: ['D', 'C', 'G'] with movements [-4, -6, -3]
    DEBUG: Found 0 total transposition patterns
  Found 0 transposition patterns
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6, 4]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6, 4, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6, 4, 0, -2]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6, 4, 0, -2, -4]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6, 4, 0, -2, -4, -6]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [7, 0, -2, 6, 4, 0, -2, -4, -6, -3]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6, 4]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6, 4, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6, 4, 0, -2]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6, 4, 0, -2, -4]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6, 4, 0, -2, -4, -6]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, 6, 4, 0, -2, -4, -6, -3]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6, 4]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6, 4, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6, 4, 0, -2]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6, 4, 0, -2, -4]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6, 4, 0, -2, -4, -6]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 6, 4, 0, -2, -4, -6, -3]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [6, 4]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [6, 4, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [6, 4, 0, -2]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [6, 4, 0, -2, -4]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [6, 4, 0, -2, -4, -6]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [6, 4, 0, -2, -4, -6, -3]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, 0, -2]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, 0, -2, -4]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, 0, -2, -4, -6]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, 0, -2, -4, -6, -3]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, -4]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, -4, -6]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, -2, -4, -6, -3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, -4]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, -4, -6]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, -4, -6, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-4, -6]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-4, -6, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-6, -3]
     Length: 2
  Found 7 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene H at index 0: position=0, movement=7, target=7
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene A at index 2: position=2, movement=-2, target=0
   Found focus gene J at index 3: position=3, movement=6, target=9
   Found focus gene I at index 4: position=4, movement=4, target=8
   Found focus gene F at index 5: position=5, movement=0, target=5
   Found focus gene E at index 6: position=6, movement=-2, target=4
   Found focus gene D at index 7: position=7, movement=-4, target=3
   Found focus gene C at index 8: position=8, movement=-6, target=2
   Found focus gene G at index 9: position=9, movement=-3, target=6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: H
   movement1: 7
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: A
   movement2: -2
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: A
   movement1: -2
   gene2: J
   movement2: 6
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: A(-2) <-> J(6)
   A would move from pos 2 to pos 3
   J would move from pos 3 to pos 2
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 2
   gene1: A
   movement1: -2
   gene2: J
   movement2: 6
🔍 FOCUS GENE ADJACENCY SELECTED: A(-2) <-> J(6) at indices 2-3
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: J
   movement1: 6
   gene2: I
   movement2: 4
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: I
   movement1: 4
   gene2: F
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: F
   movement1: 0
   gene2: E
   movement2: -2
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: E
   movement1: -2
   gene2: D
   movement2: -4
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: D
   movement1: -4
   gene2: C
   movement2: -6
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: C
   movement1: -6
   gene2: G
   movement2: -3
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 1
  Found 1 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(3, 8, 3), (3, 7, 2), (3, 6, 2), (4, 7, 2), (0, 2, 1), (4, 6, 1), (2, 3, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(3, 8, 3), (3, 7, 2), (3, 6, 2), (4, 7, 2), (0, 2, 1), (4, 6, 1), (2, 3, 1)]
  DEBUG: Processing flip pattern 3-8 (size: 3)
  DEBUG: Flip 3-8 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(3, 8)}
  DEBUG: Processing flip pattern 3-7 (size: 2)
  DEBUG: Flip 3-7 overlaps with 3-8
  DEBUG: Flip 3-7 REJECTED - overlap detected
  DEBUG: Processing flip pattern 3-6 (size: 2)
  DEBUG: Flip 3-6 overlaps with 3-8
  DEBUG: Flip 3-6 REJECTED - overlap detected
  DEBUG: Processing flip pattern 4-7 (size: 2)
  DEBUG: Flip 4-7 overlaps with 3-8
  DEBUG: Flip 4-7 REJECTED - overlap detected
  DEBUG: Processing flip pattern 0-2 (size: 1)
  DEBUG: Flip 0-2 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(3, 8), (0, 2)}
  DEBUG: Processing flip pattern 4-6 (size: 1)
  DEBUG: Flip 4-6 overlaps with 3-8
  DEBUG: Flip 4-6 REJECTED - overlap detected
  DEBUG: Processing flip pattern 2-3 (size: 1)
  DEBUG: Flip 2-3 overlaps with 3-8
  DEBUG: Flip 2-3 REJECTED - overlap detected
  DEBUG: find_non_overlapping_flips - Final result: [(3, 8, 3), (0, 2, 1)]
  Non-overlapping flips: 2
  DEBUG: Testing 2 flips for biological validity...
  FLIP BEFORE: [('J', 6), ('I', 4), ('F', 0), ('E', -2), ('D', -4), ('C', -6)]
  🔍 SEQUENCE DEBUG - Segment [3-8]:
     Segment length: 6
     All genes in segment:
       [3]: J at pos=3, move=6, target=9 🔍
       [4]: I at pos=4, move=4, target=8 🔍
       [5]: F at pos=5, move=0, target=5 🔍
       [6]: E at pos=6, move=-2, target=4 🔍
       [7]: D at pos=7, move=-4, target=3 🔍
       [8]: C at pos=8, move=-6, target=2 🔍
     🔍 FOCUS GENES in this segment: ['J', 'I', 'F', 'E', 'D', 'C']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [3-8]: 6 genes
     Magnitude before: 22
     Individual movements: [('J', 6), ('I', 4), ('F', 0), ('E', -2), ('D', -4), ('C', -6)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      C: -6 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: C
   Position: 3 → 3
   Movement: -6 → -1
   Target: 2
   Context: flip[3-8]
   Progress: 1/1 units remaining
      D: -4 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: D
   Position: 4 → 4
   Movement: -4 → -1
   Target: 3
   Context: flip[3-8]
   Progress: 1/1 units remaining
      E: -2 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: E
   Position: 5 → 5
   Movement: -2 → -1
   Target: 4
   Context: flip[3-8]
   Progress: 1/1 units remaining
      F: 0 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 6 → 6
   Movement: 0 → -1
   Target: 5
   Context: flip[3-8]
   Progress: 1/1 units remaining
      I: 4 → 1 (|1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 7 → 7
   Movement: 4 → 1
   Target: 8
   Context: flip[3-8]
   Progress: 1/1 units remaining
      J: 6 → 1 (|1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 8 → 8
   Movement: 6 → 1
   Target: 9
   Context: flip[3-8]
   Progress: 1/1 units remaining
     Magnitude after: 6
     Magnitude change: -16
  FLIP AFTER:  [('C', -1), ('D', -1), ('E', -1), ('F', -1), ('I', 1), ('J', 1)]
    Flip accepted: 34 -> 18
  FLIP BEFORE: [('H', 7), ('B', 0), ('A', -2)]
  🔍 SEQUENCE DEBUG - Segment [0-2]:
     Segment length: 3
     All genes in segment:
       [0]: H at pos=0, move=7, target=7 🔍
       [1]: B at pos=1, move=0, target=1 🔍
       [2]: A at pos=2, move=-2, target=0 🔍
     🔍 FOCUS GENES in this segment: ['H', 'B', 'A']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [0-2]: 3 genes
     Magnitude before: 9
     Individual movements: [('H', 7), ('B', 0), ('A', -2)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      A: -2 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: A
   Position: 0 → 0
   Movement: -2 → 0
   Target: 0
   Context: flip[0-2]
   Progress: 0/0 units remaining
      B: 0 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: B
   Position: 1 → 1
   Movement: 0 → 0
   Target: 1
   Context: flip[0-2]
   Progress: 0/0 units remaining
      H: 7 → 5 (|5| = 5)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 2 → 2
   Movement: 7 → 5
   Target: 7
   Context: flip[0-2]
   Progress: 5/5 units remaining
     Magnitude after: 5
     Magnitude change: -4
  FLIP AFTER:  [('A', 0), ('B', 0), ('H', 5)]
    Flip accepted: 34 -> 30
🔍 SEGMENT INDEPENDENCE: Validating 2 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 25 segment overlaps found:
       - J vs I: overlap at [4-8]
         (flip[3:8] conflicts with flip[3:8])
       - J vs F: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - J vs E: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - J vs D: overlap at [3-7]
         (flip[3:8] conflicts with flip[3:8])
       - J vs C: overlap at [3-8]
         (flip[3:8] conflicts with flip[3:8])
       - J vs H: overlap at [3-7]
         (flip[3:8] conflicts with flip[0:2])
       - I vs F: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - I vs E: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - I vs D: overlap at [4-7]
         (flip[3:8] conflicts with flip[3:8])
       - I vs C: overlap at [4-8]
         (flip[3:8] conflicts with flip[3:8])
       - I vs H: overlap at [4-7]
         (flip[3:8] conflicts with flip[0:2])
       - F vs E: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - F vs D: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - F vs C: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - F vs H: overlap at [5-5]
         (flip[3:8] conflicts with flip[0:2])
       - E vs D: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - E vs C: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - E vs H: overlap at [4-6]
         (flip[3:8] conflicts with flip[0:2])
       - D vs C: overlap at [3-7]
         (flip[3:8] conflicts with flip[3:8])
       - D vs H: overlap at [3-7]
         (flip[3:8] conflicts with flip[0:2])
       - C vs H: overlap at [2-7]
         (flip[3:8] conflicts with flip[0:2])
       - C vs A: overlap at [2-2]
         (flip[3:8] conflicts with flip[0:2])
       - H vs B: overlap at [1-1]
         (flip[0:2] conflicts with flip[0:2])
       - H vs A: overlap at [0-2]
         (flip[0:2] conflicts with flip[0:2])
       - B vs A: overlap at [1-1]
         (flip[0:2] conflicts with flip[0:2])
🔍 SEGMENT INDEPENDENCE: Validating 2 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 25 segment overlaps found:
       - J vs I: overlap at [4-8]
         (flip[3:8] conflicts with flip[3:8])
       - J vs F: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - J vs E: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - J vs D: overlap at [3-7]
         (flip[3:8] conflicts with flip[3:8])
       - J vs C: overlap at [3-8]
         (flip[3:8] conflicts with flip[3:8])
       - J vs H: overlap at [3-7]
         (flip[3:8] conflicts with flip[0:2])
       - I vs F: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - I vs E: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - I vs D: overlap at [4-7]
         (flip[3:8] conflicts with flip[3:8])
       - I vs C: overlap at [4-8]
         (flip[3:8] conflicts with flip[3:8])
       - I vs H: overlap at [4-7]
         (flip[3:8] conflicts with flip[0:2])
       - F vs E: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - F vs D: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - F vs C: overlap at [5-5]
         (flip[3:8] conflicts with flip[3:8])
       - F vs H: overlap at [5-5]
         (flip[3:8] conflicts with flip[0:2])
       - E vs D: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - E vs C: overlap at [4-6]
         (flip[3:8] conflicts with flip[3:8])
       - E vs H: overlap at [4-6]
         (flip[3:8] conflicts with flip[0:2])
       - D vs C: overlap at [3-7]
         (flip[3:8] conflicts with flip[3:8])
       - D vs H: overlap at [3-7]
         (flip[3:8] conflicts with flip[0:2])
       - C vs H: overlap at [2-7]
         (flip[3:8] conflicts with flip[0:2])
       - C vs A: overlap at [2-2]
         (flip[3:8] conflicts with flip[0:2])
       - H vs B: overlap at [1-1]
         (flip[0:2] conflicts with flip[0:2])
       - H vs A: overlap at [0-2]
         (flip[0:2] conflicts with flip[0:2])
       - B vs A: overlap at [1-1]
         (flip[0:2] conflicts with flip[0:2])
  🔄 SEQUENTIAL FALLBACK: Applying 2 interdependent flips one by one
    Step 1/2: Applying (3, 8, 3)
  FLIP BEFORE: [('J', 6), ('I', 4), ('F', 0), ('E', -2), ('D', -4), ('C', -6)]
  🔍 SEQUENCE DEBUG - Segment [3-8]:
     Segment length: 6
     All genes in segment:
       [3]: J at pos=3, move=6, target=9 🔍
       [4]: I at pos=4, move=4, target=8 🔍
       [5]: F at pos=5, move=0, target=5 🔍
       [6]: E at pos=6, move=-2, target=4 🔍
       [7]: D at pos=7, move=-4, target=3 🔍
       [8]: C at pos=8, move=-6, target=2 🔍
     🔍 FOCUS GENES in this segment: ['J', 'I', 'F', 'E', 'D', 'C']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [3-8]: 6 genes
     Magnitude before: 22
     Individual movements: [('J', 6), ('I', 4), ('F', 0), ('E', -2), ('D', -4), ('C', -6)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      C: -6 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: C
   Position: 3 → 3
   Movement: -6 → -1
   Target: 2
   Context: flip[3-8]
   Progress: 1/1 units remaining
      D: -4 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: D
   Position: 4 → 4
   Movement: -4 → -1
   Target: 3
   Context: flip[3-8]
   Progress: 1/1 units remaining
      E: -2 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: E
   Position: 5 → 5
   Movement: -2 → -1
   Target: 4
   Context: flip[3-8]
   Progress: 1/1 units remaining
      F: 0 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 6 → 6
   Movement: 0 → -1
   Target: 5
   Context: flip[3-8]
   Progress: 1/1 units remaining
      I: 4 → 1 (|1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 7 → 7
   Movement: 4 → 1
   Target: 8
   Context: flip[3-8]
   Progress: 1/1 units remaining
      J: 6 → 1 (|1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 8 → 8
   Movement: 6 → 1
   Target: 9
   Context: flip[3-8]
   Progress: 1/1 units remaining
     Magnitude after: 6
     Magnitude change: -16
  FLIP AFTER:  [('C', -1), ('D', -1), ('E', -1), ('F', -1), ('I', 1), ('J', 1)]
    Step 2/2: Applying (0, 2, 1)
  FLIP BEFORE: [('H', 7), ('B', 0), ('A', -2)]
  🔍 SEQUENCE DEBUG - Segment [0-2]:
     Segment length: 3
     All genes in segment:
       [0]: H at pos=0, move=7, target=7 🔍
       [1]: B at pos=1, move=0, target=1 🔍
       [2]: A at pos=2, move=-2, target=0 🔍
     🔍 FOCUS GENES in this segment: ['H', 'B', 'A']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [0-2]: 3 genes
     Magnitude before: 9
     Individual movements: [('H', 7), ('B', 0), ('A', -2)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      A: -2 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: A
   Position: 0 → 0
   Movement: -2 → 0
   Target: 0
   Context: flip[0-2]
   Progress: 0/0 units remaining
      B: 0 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: B
   Position: 1 → 1
   Movement: 0 → 0
   Target: 1
   Context: flip[0-2]
   Progress: 0/0 units remaining
      H: 7 → 5 (|5| = 5)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 2 → 2
   Movement: 7 → 5
   Target: 7
   Context: flip[0-2]
   Progress: 5/5 units remaining
     Magnitude after: 5
     Magnitude change: -4
  FLIP AFTER:  [('A', 0), ('B', 0), ('H', 5)]
  Applied 2 flip inversions
Iteration 2: Applied 1 inversions
  Movement recalculation completed
Iteration 3: Starting...
  DEBUG A - Iteration 3:
    Current position: 0
    Current movement: 0
    Target position: 0
    Distance to target: 0
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 0
   movement: 0
   target: 0
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG B - Iteration 3:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG H - Iteration 3:
    Current position: 2
    Current movement: 5
    Target position: 7
    Distance to target: 5
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 2
   movement: 5
   target: 7
   distance_to_target: 5
    📉 DEGRADING (movement increased)
  DEBUG C - Iteration 3:
    Current position: 3
    Current movement: -1
    Target position: 2
    Distance to target: -1
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 3
   movement: -1
   target: 2
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG D - Iteration 3:
    Current position: 4
    Current movement: -1
    Target position: 3
    Distance to target: -1
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 4
   movement: -1
   target: 3
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG E - Iteration 3:
    Current position: 5
    Current movement: -1
    Target position: 4
    Distance to target: -1
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 5
   movement: -1
   target: 4
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG F - Iteration 3:
    Current position: 6
    Current movement: -1
    Target position: 5
    Distance to target: -1
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 6
   movement: -1
   target: 5
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 3:
    Current position: 7
    Current movement: 1
    Target position: 8
    Distance to target: 1
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 7
   movement: 1
   target: 8
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG J - Iteration 3:
    Current position: 8
    Current movement: 1
    Target position: 9
    Distance to target: 1
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 8
   movement: 1
   target: 9
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 3:
    Current position: 9
    Current movement: -3
    Target position: 6
    Distance to target: -3
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 3 start
   position: 9
   movement: -3
   target: 6
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  CONVERGENCE STATUS:
    Total movement: 14.00
    Non-zero movements: 8 (sample: [5, -1, -1, -1, -1])
    Large movements (|>2|): 2
    Sum of + movements: 7.00 (3 genes)
    Sum of - movements: 7.00 (5 genes)
    Movement balance: 0.00
    Movement reduction: 20.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['A', 'B', 'H'] with movements [0, 0, 5]
    DEBUG: Testing segment [0-3]: ['A', 'B', 'H', 'C'] with movements [0, 0, 5, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-4]: ['A', 'B', 'H', 'C', 'D'] with movements [0, 0, 5, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [0-4]: ['A', 'B', 'H', 'C', 'D'] with movements [0, 0, 5, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-5]: ['A', 'B', 'H', 'C', 'D', 'E'] with movements [0, 0, 5, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [0-5]: ['A', 'B', 'H', 'C', 'D', 'E'] with movements [0, 0, 5, -1, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-6]: ['A', 'B', 'H', 'C', 'D', 'E', 'F'] with movements [0, 0, 5, -1, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+4) - checking further...
    DEBUG: Found transposition pattern [0-6]: ['A', 'B', 'H', 'C', 'D', 'E', 'F'] with movements [0, 0, 5, -1, -1, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-7]: ['A', 'B', 'H', 'C', 'D', 'E', 'F', 'I'] with movements [0, 0, 5, -1, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [5, 1], Negative section: [-1, -1, -1, -1]
    DEBUG: Testing segment [0-8]: ['A', 'B', 'H', 'C', 'D', 'E', 'F', 'I', 'J'] with movements [0, 0, 5, -1, -1, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [5, 1, 1], Negative section: [-1, -1, -1, -1]
    DEBUG: Testing segment [0-9]: ['A', 'B', 'H', 'C', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [0, 0, 5, -1, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [5, 1, 1], Negative section: [-1, -1, -1, -1, -3]
    DEBUG: Testing segment [1-3]: ['B', 'H', 'C'] with movements [0, 5, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-4]: ['B', 'H', 'C', 'D'] with movements [0, 5, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [1-4]: ['B', 'H', 'C', 'D'] with movements [0, 5, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-5]: ['B', 'H', 'C', 'D', 'E'] with movements [0, 5, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [1-5]: ['B', 'H', 'C', 'D', 'E'] with movements [0, 5, -1, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-6]: ['B', 'H', 'C', 'D', 'E', 'F'] with movements [0, 5, -1, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+4) - checking further...
    DEBUG: Found transposition pattern [1-6]: ['B', 'H', 'C', 'D', 'E', 'F'] with movements [0, 5, -1, -1, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-7]: ['B', 'H', 'C', 'D', 'E', 'F', 'I'] with movements [0, 5, -1, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [5, 1], Negative section: [-1, -1, -1, -1]
    DEBUG: Testing segment [1-8]: ['B', 'H', 'C', 'D', 'E', 'F', 'I', 'J'] with movements [0, 5, -1, -1, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [5, 1, 1], Negative section: [-1, -1, -1, -1]
    DEBUG: Testing segment [1-9]: ['B', 'H', 'C', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [0, 5, -1, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [5, 1, 1], Negative section: [-1, -1, -1, -1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-4]: ['H', 'C', 'D'] with movements [5, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [2-4]: ['H', 'C', 'D'] with movements [5, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-5]: ['H', 'C', 'D', 'E'] with movements [5, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [2-5]: ['H', 'C', 'D', 'E'] with movements [5, -1, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-6]: ['H', 'C', 'D', 'E', 'F'] with movements [5, -1, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+4) - checking further...
    DEBUG: Found transposition pattern [2-6]: ['H', 'C', 'D', 'E', 'F'] with movements [5, -1, -1, -1, -1]
    DEBUG:   Magnitude: 5, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-7]: ['H', 'C', 'D', 'E', 'F', 'I'] with movements [5, -1, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [5, 1], Negative section: [-1, -1, -1, -1]
    DEBUG: Testing segment [2-8]: ['H', 'C', 'D', 'E', 'F', 'I', 'J'] with movements [5, -1, -1, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [5, 1, 1], Negative section: [-1, -1, -1, -1]
    DEBUG: Testing segment [2-9]: ['H', 'C', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [5, -1, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [5, 1, 1], Negative section: [-1, -1, -1, -1, -3]
    DEBUG: Testing segment [3-5]: ['C', 'D', 'E'] with movements [-1, -1, -1]
    DEBUG: Testing segment [3-6]: ['C', 'D', 'E', 'F'] with movements [-1, -1, -1, -1]
    DEBUG: Testing segment [3-7]: ['C', 'D', 'E', 'F', 'I'] with movements [-1, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (1+4) - checking further...
    DEBUG: Found transposition pattern [3-7]: ['C', 'D', 'E', 'F', 'I'] with movements [-1, -1, -1, -1, 1]
    DEBUG:   Magnitude: 1, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [3-8]: ['C', 'D', 'E', 'F', 'I', 'J'] with movements [-1, -1, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Found transposition pattern [3-8]: ['C', 'D', 'E', 'F', 'I', 'J'] with movements [-1, -1, -1, -1, 1, 1]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [3-9]: ['C', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [-1, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+5) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1, 1], Negative section: [-1, -1, -1, -1, -3]
    DEBUG: Testing segment [4-6]: ['D', 'E', 'F'] with movements [-1, -1, -1]
    DEBUG: Testing segment [4-7]: ['D', 'E', 'F', 'I'] with movements [-1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [4-7]: ['D', 'E', 'F', 'I'] with movements [-1, -1, -1, 1]
    DEBUG:   Magnitude: 1, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [4-8]: ['D', 'E', 'F', 'I', 'J'] with movements [-1, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Found transposition pattern [4-8]: ['D', 'E', 'F', 'I', 'J'] with movements [-1, -1, -1, 1, 1]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [4-9]: ['D', 'E', 'F', 'I', 'J', 'G'] with movements [-1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1, 1], Negative section: [-1, -1, -1, -3]
    DEBUG: Testing segment [5-7]: ['E', 'F', 'I'] with movements [-1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [5-7]: ['E', 'F', 'I'] with movements [-1, -1, 1]
    DEBUG:   Magnitude: 1, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [5-8]: ['E', 'F', 'I', 'J'] with movements [-1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [5-9]: ['E', 'F', 'I', 'J', 'G'] with movements [-1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1, 1], Negative section: [-1, -1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [6-8]: ['F', 'I', 'J'] with movements [-1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [6-8]: ['F', 'I', 'J'] with movements [-1, 1, 1]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [6-9]: ['F', 'I', 'J', 'G'] with movements [-1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [7-9]: ['I', 'J', 'G'] with movements [1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [7-9]: ['I', 'J', 'G'] with movements [1, 1, -3]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Found 16 total transposition patterns
    DEBUG: Pattern 1: [0-4] magnitude=5, perfect=False
    DEBUG: Pattern 2: [0-5] magnitude=5, perfect=False
    DEBUG: Pattern 3: [0-6] magnitude=5, perfect=False
    DEBUG: Pattern 4: [1-4] magnitude=5, perfect=False
    DEBUG: Pattern 5: [1-5] magnitude=5, perfect=False
    DEBUG: Pattern 6: [1-6] magnitude=5, perfect=False
    DEBUG: Pattern 7: [2-4] magnitude=5, perfect=False
    DEBUG: Pattern 8: [2-5] magnitude=5, perfect=False
    DEBUG: Pattern 9: [2-6] magnitude=5, perfect=False
    DEBUG: Pattern 10: [3-8] magnitude=2, perfect=False
    DEBUG: Pattern 11: [4-8] magnitude=2, perfect=False
    DEBUG: Pattern 12: [6-8] magnitude=2, perfect=False
    DEBUG: Pattern 13: [7-9] magnitude=2, perfect=False
    DEBUG: Pattern 14: [3-7] magnitude=1, perfect=False
    DEBUG: Pattern 15: [4-7] magnitude=1, perfect=False
    DEBUG: Pattern 16: [5-7] magnitude=1, perfect=False
  Found 16 transposition patterns
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-4], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-4], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-4], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 5
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [3-8], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [4-8], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [6-8], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [7-9], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 1
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [3-7], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 1
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [4-7], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 1
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [5-7], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1, -1, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1, -1, -1, -1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1, -1, -1, -1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1, -1, -1, -1, 1, 1]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 5, -1, -1, -1, -1, 1, 1, -3]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1, -1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1, -1, -1, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1, -1, -1, -1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1, -1, -1, -1, 1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 5, -1, -1, -1, -1, 1, 1, -3]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1, -1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1, -1, -1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1, -1, -1, -1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1, -1, -1, -1, 1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [5, -1, -1, -1, -1, 1, 1, -3]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, -1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, -1, 1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, -1, 1, 1, -3]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, 1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, 1, 1, -3]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1, 1, -3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, 1, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, 1, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -3]
     Length: 2
  Found 4 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene H at index 2: position=2, movement=5, target=7
   Found focus gene C at index 3: position=3, movement=-1, target=2
   Found focus gene D at index 4: position=4, movement=-1, target=3
   Found focus gene E at index 5: position=5, movement=-1, target=4
   Found focus gene F at index 6: position=6, movement=-1, target=5
   Found focus gene I at index 7: position=7, movement=1, target=8
   Found focus gene J at index 8: position=8, movement=1, target=9
   Found focus gene G at index 9: position=9, movement=-3, target=6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: H
   movement2: 5
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: H
   movement1: 5
   gene2: C
   movement2: -1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: H(5) <-> C(-1)
   H would move from pos 2 to pos 3
   C would move from pos 3 to pos 2
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 2
   gene1: H
   movement1: 5
   gene2: C
   movement2: -1
🔍 FOCUS GENE ADJACENCY SELECTED: H(5) <-> C(-1) at indices 2-3
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: C
   movement1: -1
   gene2: D
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: D
   movement1: -1
   gene2: E
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: E
   movement1: -1
   gene2: F
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: F(-1) <-> I(1)
   F would move from pos 6 to pos 7
   I would move from pos 7 to pos 6
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
🔍 FOCUS GENE ADJACENCY SELECTED: F(-1) <-> I(1) at indices 6-7
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: I
   movement1: 1
   gene2: J
   movement2: 1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: J(1) <-> G(-3)
   J would move from pos 8 to pos 9
   G would move from pos 9 to pos 8
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
🔍 FOCUS GENE ADJACENCY SELECTED: J(1) <-> G(-3) at indices 8-9
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 3
  Found 3 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(5, 8, 2), (2, 3, 1), (6, 7, 1), (8, 9, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(5, 8, 2), (2, 3, 1), (6, 7, 1), (8, 9, 1)]
  DEBUG: Processing flip pattern 5-8 (size: 2)
  DEBUG: Flip 5-8 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(5, 8)}
  DEBUG: Processing flip pattern 2-3 (size: 1)
  DEBUG: Flip 2-3 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(2, 3), (5, 8)}
  DEBUG: Processing flip pattern 6-7 (size: 1)
  DEBUG: Flip 6-7 overlaps with 5-8
  DEBUG: Flip 6-7 REJECTED - overlap detected
  DEBUG: Processing flip pattern 8-9 (size: 1)
  DEBUG: Flip 8-9 overlaps with 5-8
  DEBUG: Flip 8-9 REJECTED - overlap detected
  DEBUG: find_non_overlapping_flips - Final result: [(5, 8, 2), (2, 3, 1)]
  Non-overlapping flips: 2
  DEBUG: Testing 2 flips for biological validity...
  FLIP BEFORE: [('E', -1), ('F', -1), ('I', 1), ('J', 1)]
  🔍 SEQUENCE DEBUG - Segment [5-8]:
     Segment length: 4
     All genes in segment:
       [5]: E at pos=5, move=-1, target=4 🔍
       [6]: F at pos=6, move=-1, target=5 🔍
       [7]: I at pos=7, move=1, target=8 🔍
       [8]: J at pos=8, move=1, target=9 🔍
     🔍 FOCUS GENES in this segment: ['E', 'F', 'I', 'J']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [5-8]: 4 genes
     Magnitude before: 4
     Individual movements: [('E', -1), ('F', -1), ('I', 1), ('J', 1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      J: 1 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 5 → 5
   Movement: 1 → 4
   Target: 9
   Context: flip[5-8]
   Progress: 4/4 units remaining
      I: 1 → 2 (|2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 6 → 6
   Movement: 1 → 2
   Target: 8
   Context: flip[5-8]
   Progress: 2/2 units remaining
      F: -1 → -2 (|-2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 7 → 7
   Movement: -1 → -2
   Target: 5
   Context: flip[5-8]
   Progress: 2/2 units remaining
      E: -1 → -4 (|-4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: E
   Position: 8 → 8
   Movement: -1 → -4
   Target: 4
   Context: flip[5-8]
   Progress: 4/4 units remaining
     Magnitude after: 12
     Magnitude change: 8
  FLIP AFTER:  [('J', 4), ('I', 2), ('F', -2), ('E', -4)]
    Flip rejected: 14 -> 22 (increase: +8.00)
      Sample genes: ['E', 'F', 'I'] with movements: [-1, -1, 1]
  FLIP BEFORE: [('H', 5), ('C', -1)]
  🔍 SEQUENCE DEBUG - Segment [2-3]:
     Segment length: 2
     All genes in segment:
       [2]: H at pos=2, move=5, target=7 🔍
       [3]: C at pos=3, move=-1, target=2 🔍
     🔍 FOCUS GENES in this segment: ['H', 'C']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [2-3]: 2 genes
     Magnitude before: 6
     Individual movements: [('H', 5), ('C', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      C: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: C
   Position: 2 → 2
   Movement: -1 → 0
   Target: 2
   Context: flip[2-3]
   Progress: 0/0 units remaining
      H: 5 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 3 → 3
   Movement: 5 → 4
   Target: 7
   Context: flip[2-3]
   Progress: 4/4 units remaining
     Magnitude after: 4
     Magnitude change: -2
  FLIP AFTER:  [('C', 0), ('H', 4)]
    Flip accepted: 14 -> 12
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 1 segment overlaps found:
       - H vs C: overlap at [2-3]
         (flip[2:3] conflicts with flip[2:3])
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 1 segment overlaps found:
       - H vs C: overlap at [2-3]
         (flip[2:3] conflicts with flip[2:3])
  🔄 SEQUENTIAL FALLBACK: Applying 1 interdependent flips one by one
    Step 1/1: Applying (2, 3, 1)
  FLIP BEFORE: [('H', 5), ('C', -1)]
  🔍 SEQUENCE DEBUG - Segment [2-3]:
     Segment length: 2
     All genes in segment:
       [2]: H at pos=2, move=5, target=7 🔍
       [3]: C at pos=3, move=-1, target=2 🔍
     🔍 FOCUS GENES in this segment: ['H', 'C']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [2-3]: 2 genes
     Magnitude before: 6
     Individual movements: [('H', 5), ('C', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      C: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: C
   Position: 2 → 2
   Movement: -1 → 0
   Target: 2
   Context: flip[2-3]
   Progress: 0/0 units remaining
      H: 5 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 3 → 3
   Movement: 5 → 4
   Target: 7
   Context: flip[2-3]
   Progress: 4/4 units remaining
     Magnitude after: 4
     Magnitude change: -2
  FLIP AFTER:  [('C', 0), ('H', 4)]
  Applied 1 flip inversions
Iteration 3: Applied 1 inversions
  Movement recalculation completed
Iteration 4: Starting...
  DEBUG A - Iteration 4:
    Current position: 0
    Current movement: 0
    Target position: 0
    Distance to target: 0
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 0
   movement: 0
   target: 0
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG B - Iteration 4:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG C - Iteration 4:
    Current position: 2
    Current movement: 0
    Target position: 2
    Distance to target: 0
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 2
   movement: 0
   target: 2
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG H - Iteration 4:
    Current position: 3
    Current movement: 4
    Target position: 7
    Distance to target: 4
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 3
   movement: 4
   target: 7
   distance_to_target: 4
    📉 DEGRADING (movement increased)
  DEBUG D - Iteration 4:
    Current position: 4
    Current movement: -1
    Target position: 3
    Distance to target: -1
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 4
   movement: -1
   target: 3
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG E - Iteration 4:
    Current position: 5
    Current movement: -1
    Target position: 4
    Distance to target: -1
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 5
   movement: -1
   target: 4
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG F - Iteration 4:
    Current position: 6
    Current movement: -1
    Target position: 5
    Distance to target: -1
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 6
   movement: -1
   target: 5
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 4:
    Current position: 7
    Current movement: 1
    Target position: 8
    Distance to target: 1
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 7
   movement: 1
   target: 8
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG J - Iteration 4:
    Current position: 8
    Current movement: 1
    Target position: 9
    Distance to target: 1
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 8
   movement: 1
   target: 9
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 4:
    Current position: 9
    Current movement: -3
    Target position: 6
    Distance to target: -3
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 4 start
   position: 9
   movement: -3
   target: 6
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  CONVERGENCE STATUS:
    Total movement: 12.00
    Non-zero movements: 7 (sample: [4, -1, -1, -1, 1])
    Large movements (|>2|): 2
    Sum of + movements: 6.00 (3 genes)
    Sum of - movements: 6.00 (4 genes)
    Movement balance: 0.00
    Movement reduction: 2.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['A', 'B', 'C'] with movements [0, 0, 0]
    DEBUG: Testing segment [0-3]: ['A', 'B', 'C', 'H'] with movements [0, 0, 0, 4]
    DEBUG: Testing segment [0-4]: ['A', 'B', 'C', 'H', 'D'] with movements [0, 0, 0, 4, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-5]: ['A', 'B', 'C', 'H', 'D', 'E'] with movements [0, 0, 0, 4, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [0-5]: ['A', 'B', 'C', 'H', 'D', 'E'] with movements [0, 0, 0, 4, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-6]: ['A', 'B', 'C', 'H', 'D', 'E', 'F'] with movements [0, 0, 0, 4, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [0-6]: ['A', 'B', 'C', 'H', 'D', 'E', 'F'] with movements [0, 0, 0, 4, -1, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-7]: ['A', 'B', 'C', 'H', 'D', 'E', 'F', 'I'] with movements [0, 0, 0, 4, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [4, 1], Negative section: [-1, -1, -1]
    DEBUG: Testing segment [0-8]: ['A', 'B', 'C', 'H', 'D', 'E', 'F', 'I', 'J'] with movements [0, 0, 0, 4, -1, -1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [0-9]: ['A', 'B', 'C', 'H', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [0, 0, 0, 4, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [4, 1, 1], Negative section: [-1, -1, -1, -3]
    DEBUG: Testing segment [1-3]: ['B', 'C', 'H'] with movements [0, 0, 4]
    DEBUG: Testing segment [1-4]: ['B', 'C', 'H', 'D'] with movements [0, 0, 4, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-5]: ['B', 'C', 'H', 'D', 'E'] with movements [0, 0, 4, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [1-5]: ['B', 'C', 'H', 'D', 'E'] with movements [0, 0, 4, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-6]: ['B', 'C', 'H', 'D', 'E', 'F'] with movements [0, 0, 4, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [1-6]: ['B', 'C', 'H', 'D', 'E', 'F'] with movements [0, 0, 4, -1, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-7]: ['B', 'C', 'H', 'D', 'E', 'F', 'I'] with movements [0, 0, 4, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [4, 1], Negative section: [-1, -1, -1]
    DEBUG: Testing segment [1-8]: ['B', 'C', 'H', 'D', 'E', 'F', 'I', 'J'] with movements [0, 0, 4, -1, -1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [1-9]: ['B', 'C', 'H', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [0, 0, 4, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [4, 1, 1], Negative section: [-1, -1, -1, -3]
    DEBUG: Testing segment [2-4]: ['C', 'H', 'D'] with movements [0, 4, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-5]: ['C', 'H', 'D', 'E'] with movements [0, 4, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [2-5]: ['C', 'H', 'D', 'E'] with movements [0, 4, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-6]: ['C', 'H', 'D', 'E', 'F'] with movements [0, 4, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [2-6]: ['C', 'H', 'D', 'E', 'F'] with movements [0, 4, -1, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-7]: ['C', 'H', 'D', 'E', 'F', 'I'] with movements [0, 4, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [4, 1], Negative section: [-1, -1, -1]
    DEBUG: Testing segment [2-8]: ['C', 'H', 'D', 'E', 'F', 'I', 'J'] with movements [0, 4, -1, -1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [2-9]: ['C', 'H', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [0, 4, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [4, 1, 1], Negative section: [-1, -1, -1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [3-5]: ['H', 'D', 'E'] with movements [4, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [3-5]: ['H', 'D', 'E'] with movements [4, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [3-6]: ['H', 'D', 'E', 'F'] with movements [4, -1, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [3-6]: ['H', 'D', 'E', 'F'] with movements [4, -1, -1, -1]
    DEBUG:   Magnitude: 4, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [3-7]: ['H', 'D', 'E', 'F', 'I'] with movements [4, -1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [4, 1], Negative section: [-1, -1, -1]
    DEBUG: Testing segment [3-8]: ['H', 'D', 'E', 'F', 'I', 'J'] with movements [4, -1, -1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [3-9]: ['H', 'D', 'E', 'F', 'I', 'J', 'G'] with movements [4, -1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (3+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=False
    DEBUG:   Positive section: [4, 1, 1], Negative section: [-1, -1, -1, -3]
    DEBUG: Testing segment [4-6]: ['D', 'E', 'F'] with movements [-1, -1, -1]
    DEBUG: Testing segment [4-7]: ['D', 'E', 'F', 'I'] with movements [-1, -1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (1+3) - checking further...
    DEBUG: Found transposition pattern [4-7]: ['D', 'E', 'F', 'I'] with movements [-1, -1, -1, 1]
    DEBUG:   Magnitude: 1, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [4-8]: ['D', 'E', 'F', 'I', 'J'] with movements [-1, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Found transposition pattern [4-8]: ['D', 'E', 'F', 'I', 'J'] with movements [-1, -1, -1, 1, 1]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [4-9]: ['D', 'E', 'F', 'I', 'J', 'G'] with movements [-1, -1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+4) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1, 1], Negative section: [-1, -1, -1, -3]
    DEBUG: Testing segment [5-7]: ['E', 'F', 'I'] with movements [-1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [5-7]: ['E', 'F', 'I'] with movements [-1, -1, 1]
    DEBUG:   Magnitude: 1, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [5-8]: ['E', 'F', 'I', 'J'] with movements [-1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [5-9]: ['E', 'F', 'I', 'J', 'G'] with movements [-1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1, 1], Negative section: [-1, -1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [6-8]: ['F', 'I', 'J'] with movements [-1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [6-8]: ['F', 'I', 'J'] with movements [-1, 1, 1]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [6-9]: ['F', 'I', 'J', 'G'] with movements [-1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [7-9]: ['I', 'J', 'G'] with movements [1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [7-9]: ['I', 'J', 'G'] with movements [1, 1, -3]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Found 13 total transposition patterns
    DEBUG: Pattern 1: [0-5] magnitude=4, perfect=False
    DEBUG: Pattern 2: [0-6] magnitude=4, perfect=False
    DEBUG: Pattern 3: [1-5] magnitude=4, perfect=False
    DEBUG: Pattern 4: [1-6] magnitude=4, perfect=False
    DEBUG: Pattern 5: [2-5] magnitude=4, perfect=False
    DEBUG: Pattern 6: [2-6] magnitude=4, perfect=False
    DEBUG: Pattern 7: [3-5] magnitude=4, perfect=False
    DEBUG: Pattern 8: [3-6] magnitude=4, perfect=False
    DEBUG: Pattern 9: [4-8] magnitude=2, perfect=False
    DEBUG: Pattern 10: [6-8] magnitude=2, perfect=False
    DEBUG: Pattern 11: [7-9] magnitude=2, perfect=False
    DEBUG: Pattern 12: [4-7] magnitude=1, perfect=False
    DEBUG: Pattern 13: [5-7] magnitude=1, perfect=False
  Found 13 transposition patterns
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [3-5], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 4
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [3-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [4-8], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [6-8], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [7-9], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 1
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [4-7], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 1
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [5-7], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4, -1, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4, -1, -1, -1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4, -1, -1, -1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4, -1, -1, -1, 1, 1]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 4, -1, -1, -1, 1, 1, -3]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4, -1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4, -1, -1, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4, -1, -1, -1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4, -1, -1, -1, 1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 4, -1, -1, -1, 1, 1, -3]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4, -1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4, -1, -1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4, -1, -1, -1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4, -1, -1, -1, 1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 4, -1, -1, -1, 1, 1, -3]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, -1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, -1, -1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, -1, -1, -1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, -1, -1, -1, 1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [4, -1, -1, -1, 1, 1, -3]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, 1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, -1, 1, 1, -3]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1, 1, -3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, 1, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, 1, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -3]
     Length: 2
  Found 4 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene H at index 3: position=3, movement=4, target=7
   Found focus gene D at index 4: position=4, movement=-1, target=3
   Found focus gene E at index 5: position=5, movement=-1, target=4
   Found focus gene F at index 6: position=6, movement=-1, target=5
   Found focus gene I at index 7: position=7, movement=1, target=8
   Found focus gene J at index 8: position=8, movement=1, target=9
   Found focus gene G at index 9: position=9, movement=-3, target=6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: H
   movement2: 4
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: H
   movement1: 4
   gene2: D
   movement2: -1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: H(4) <-> D(-1)
   H would move from pos 3 to pos 4
   D would move from pos 4 to pos 3
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 3
   gene1: H
   movement1: 4
   gene2: D
   movement2: -1
🔍 FOCUS GENE ADJACENCY SELECTED: H(4) <-> D(-1) at indices 3-4
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: D
   movement1: -1
   gene2: E
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: E
   movement1: -1
   gene2: F
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: F(-1) <-> I(1)
   F would move from pos 6 to pos 7
   I would move from pos 7 to pos 6
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
🔍 FOCUS GENE ADJACENCY SELECTED: F(-1) <-> I(1) at indices 6-7
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: I
   movement1: 1
   gene2: J
   movement2: 1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: J(1) <-> G(-3)
   J would move from pos 8 to pos 9
   G would move from pos 9 to pos 8
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
🔍 FOCUS GENE ADJACENCY SELECTED: J(1) <-> G(-3) at indices 8-9
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 3
  Found 3 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(5, 8, 2), (3, 4, 1), (6, 7, 1), (8, 9, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(5, 8, 2), (3, 4, 1), (6, 7, 1), (8, 9, 1)]
  DEBUG: Processing flip pattern 5-8 (size: 2)
  DEBUG: Flip 5-8 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(5, 8)}
  DEBUG: Processing flip pattern 3-4 (size: 1)
  DEBUG: Flip 3-4 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(3, 4), (5, 8)}
  DEBUG: Processing flip pattern 6-7 (size: 1)
  DEBUG: Flip 6-7 overlaps with 5-8
  DEBUG: Flip 6-7 REJECTED - overlap detected
  DEBUG: Processing flip pattern 8-9 (size: 1)
  DEBUG: Flip 8-9 overlaps with 5-8
  DEBUG: Flip 8-9 REJECTED - overlap detected
  DEBUG: find_non_overlapping_flips - Final result: [(5, 8, 2), (3, 4, 1)]
  Non-overlapping flips: 2
  DEBUG: Testing 2 flips for biological validity...
  FLIP BEFORE: [('E', -1), ('F', -1), ('I', 1), ('J', 1)]
  🔍 SEQUENCE DEBUG - Segment [5-8]:
     Segment length: 4
     All genes in segment:
       [5]: E at pos=5, move=-1, target=4 🔍
       [6]: F at pos=6, move=-1, target=5 🔍
       [7]: I at pos=7, move=1, target=8 🔍
       [8]: J at pos=8, move=1, target=9 🔍
     🔍 FOCUS GENES in this segment: ['E', 'F', 'I', 'J']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [5-8]: 4 genes
     Magnitude before: 4
     Individual movements: [('E', -1), ('F', -1), ('I', 1), ('J', 1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      J: 1 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 5 → 5
   Movement: 1 → 4
   Target: 9
   Context: flip[5-8]
   Progress: 4/4 units remaining
      I: 1 → 2 (|2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 6 → 6
   Movement: 1 → 2
   Target: 8
   Context: flip[5-8]
   Progress: 2/2 units remaining
      F: -1 → -2 (|-2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 7 → 7
   Movement: -1 → -2
   Target: 5
   Context: flip[5-8]
   Progress: 2/2 units remaining
      E: -1 → -4 (|-4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: E
   Position: 8 → 8
   Movement: -1 → -4
   Target: 4
   Context: flip[5-8]
   Progress: 4/4 units remaining
     Magnitude after: 12
     Magnitude change: 8
  FLIP AFTER:  [('J', 4), ('I', 2), ('F', -2), ('E', -4)]
    Flip rejected: 12 -> 20 (increase: +8.00)
      Sample genes: ['E', 'F', 'I'] with movements: [-1, -1, 1]
  FLIP BEFORE: [('H', 4), ('D', -1)]
  🔍 SEQUENCE DEBUG - Segment [3-4]:
     Segment length: 2
     All genes in segment:
       [3]: H at pos=3, move=4, target=7 🔍
       [4]: D at pos=4, move=-1, target=3 🔍
     🔍 FOCUS GENES in this segment: ['H', 'D']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [3-4]: 2 genes
     Magnitude before: 5
     Individual movements: [('H', 4), ('D', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      D: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: D
   Position: 3 → 3
   Movement: -1 → 0
   Target: 3
   Context: flip[3-4]
   Progress: 0/0 units remaining
      H: 4 → 3 (|3| = 3)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 4 → 4
   Movement: 4 → 3
   Target: 7
   Context: flip[3-4]
   Progress: 3/3 units remaining
     Magnitude after: 3
     Magnitude change: -2
  FLIP AFTER:  [('D', 0), ('H', 3)]
    Flip accepted: 12 -> 10
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 1 segment overlaps found:
       - H vs D: overlap at [3-4]
         (flip[3:4] conflicts with flip[3:4])
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 1 segment overlaps found:
       - H vs D: overlap at [3-4]
         (flip[3:4] conflicts with flip[3:4])
  🔄 SEQUENTIAL FALLBACK: Applying 1 interdependent flips one by one
    Step 1/1: Applying (3, 4, 1)
  FLIP BEFORE: [('H', 4), ('D', -1)]
  🔍 SEQUENCE DEBUG - Segment [3-4]:
     Segment length: 2
     All genes in segment:
       [3]: H at pos=3, move=4, target=7 🔍
       [4]: D at pos=4, move=-1, target=3 🔍
     🔍 FOCUS GENES in this segment: ['H', 'D']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [3-4]: 2 genes
     Magnitude before: 5
     Individual movements: [('H', 4), ('D', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      D: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: D
   Position: 3 → 3
   Movement: -1 → 0
   Target: 3
   Context: flip[3-4]
   Progress: 0/0 units remaining
      H: 4 → 3 (|3| = 3)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 4 → 4
   Movement: 4 → 3
   Target: 7
   Context: flip[3-4]
   Progress: 3/3 units remaining
     Magnitude after: 3
     Magnitude change: -2
  FLIP AFTER:  [('D', 0), ('H', 3)]
  Applied 1 flip inversions
Iteration 4: Applied 1 inversions
  Movement recalculation completed
Iteration 5: Starting...
  DEBUG A - Iteration 5:
    Current position: 0
    Current movement: 0
    Target position: 0
    Distance to target: 0
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 0
   movement: 0
   target: 0
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG B - Iteration 5:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG C - Iteration 5:
    Current position: 2
    Current movement: 0
    Target position: 2
    Distance to target: 0
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 2
   movement: 0
   target: 2
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG D - Iteration 5:
    Current position: 3
    Current movement: 0
    Target position: 3
    Distance to target: 0
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 3
   movement: 0
   target: 3
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG H - Iteration 5:
    Current position: 4
    Current movement: 3
    Target position: 7
    Distance to target: 3
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 4
   movement: 3
   target: 7
   distance_to_target: 3
    📉 DEGRADING (movement increased)
  DEBUG E - Iteration 5:
    Current position: 5
    Current movement: -1
    Target position: 4
    Distance to target: -1
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 5
   movement: -1
   target: 4
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG F - Iteration 5:
    Current position: 6
    Current movement: -1
    Target position: 5
    Distance to target: -1
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 6
   movement: -1
   target: 5
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 5:
    Current position: 7
    Current movement: 1
    Target position: 8
    Distance to target: 1
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 7
   movement: 1
   target: 8
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG J - Iteration 5:
    Current position: 8
    Current movement: 1
    Target position: 9
    Distance to target: 1
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 8
   movement: 1
   target: 9
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 5:
    Current position: 9
    Current movement: -3
    Target position: 6
    Distance to target: -3
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 5 start
   position: 9
   movement: -3
   target: 6
   distance_to_target: -3
    📉 DEGRADING (movement increased)
  CONVERGENCE STATUS:
    Total movement: 10.00
    Non-zero movements: 6 (sample: [3, -1, -1, 1, 1])
    Large movements (|>2|): 2
    Sum of + movements: 5.00 (3 genes)
    Sum of - movements: 5.00 (3 genes)
    Movement balance: 0.00
    Movement reduction: 2.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['A', 'B', 'C'] with movements [0, 0, 0]
    DEBUG: Testing segment [0-3]: ['A', 'B', 'C', 'D'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [0-4]: ['A', 'B', 'C', 'D', 'H'] with movements [0, 0, 0, 0, 3]
    DEBUG: Testing segment [0-5]: ['A', 'B', 'C', 'D', 'H', 'E'] with movements [0, 0, 0, 0, 3, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-6]: ['A', 'B', 'C', 'D', 'H', 'E', 'F'] with movements [0, 0, 0, 0, 3, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [0-6]: ['A', 'B', 'C', 'D', 'H', 'E', 'F'] with movements [0, 0, 0, 0, 3, -1, -1]
    DEBUG:   Magnitude: 3, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [0-7]: ['A', 'B', 'C', 'D', 'H', 'E', 'F', 'I'] with movements [0, 0, 0, 0, 3, -1, -1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [0-8]: ['A', 'B', 'C', 'D', 'H', 'E', 'F', 'I', 'J'] with movements [0, 0, 0, 0, 3, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [3, 1, 1], Negative section: [-1, -1]
    DEBUG: Testing segment [0-9]: ['A', 'B', 'C', 'D', 'H', 'E', 'F', 'I', 'J', 'G'] with movements [0, 0, 0, 0, 3, -1, -1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [1-3]: ['B', 'C', 'D'] with movements [0, 0, 0]
    DEBUG: Testing segment [1-4]: ['B', 'C', 'D', 'H'] with movements [0, 0, 0, 3]
    DEBUG: Testing segment [1-5]: ['B', 'C', 'D', 'H', 'E'] with movements [0, 0, 0, 3, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-6]: ['B', 'C', 'D', 'H', 'E', 'F'] with movements [0, 0, 0, 3, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [1-6]: ['B', 'C', 'D', 'H', 'E', 'F'] with movements [0, 0, 0, 3, -1, -1]
    DEBUG:   Magnitude: 3, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [1-7]: ['B', 'C', 'D', 'H', 'E', 'F', 'I'] with movements [0, 0, 0, 3, -1, -1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [1-8]: ['B', 'C', 'D', 'H', 'E', 'F', 'I', 'J'] with movements [0, 0, 0, 3, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [3, 1, 1], Negative section: [-1, -1]
    DEBUG: Testing segment [1-9]: ['B', 'C', 'D', 'H', 'E', 'F', 'I', 'J', 'G'] with movements [0, 0, 0, 3, -1, -1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [2-4]: ['C', 'D', 'H'] with movements [0, 0, 3]
    DEBUG: Testing segment [2-5]: ['C', 'D', 'H', 'E'] with movements [0, 0, 3, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-6]: ['C', 'D', 'H', 'E', 'F'] with movements [0, 0, 3, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [2-6]: ['C', 'D', 'H', 'E', 'F'] with movements [0, 0, 3, -1, -1]
    DEBUG:   Magnitude: 3, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [2-7]: ['C', 'D', 'H', 'E', 'F', 'I'] with movements [0, 0, 3, -1, -1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [2-8]: ['C', 'D', 'H', 'E', 'F', 'I', 'J'] with movements [0, 0, 3, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [3, 1, 1], Negative section: [-1, -1]
    DEBUG: Testing segment [2-9]: ['C', 'D', 'H', 'E', 'F', 'I', 'J', 'G'] with movements [0, 0, 3, -1, -1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [3-5]: ['D', 'H', 'E'] with movements [0, 3, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [3-6]: ['D', 'H', 'E', 'F'] with movements [0, 3, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [3-6]: ['D', 'H', 'E', 'F'] with movements [0, 3, -1, -1]
    DEBUG:   Magnitude: 3, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [3-7]: ['D', 'H', 'E', 'F', 'I'] with movements [0, 3, -1, -1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [3-8]: ['D', 'H', 'E', 'F', 'I', 'J'] with movements [0, 3, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [3, 1, 1], Negative section: [-1, -1]
    DEBUG: Testing segment [3-9]: ['D', 'H', 'E', 'F', 'I', 'J', 'G'] with movements [0, 3, -1, -1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [4-6]: ['H', 'E', 'F'] with movements [3, -1, -1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [4-6]: ['H', 'E', 'F'] with movements [3, -1, -1]
    DEBUG:   Magnitude: 3, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [4-7]: ['H', 'E', 'F', 'I'] with movements [3, -1, -1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [4-8]: ['H', 'E', 'F', 'I', 'J'] with movements [3, -1, -1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (3+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [3, 1, 1], Negative section: [-1, -1]
    DEBUG: Testing segment [4-9]: ['H', 'E', 'F', 'I', 'J', 'G'] with movements [3, -1, -1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (3+3), likely inversion
    DEBUG: Testing segment [5-7]: ['E', 'F', 'I'] with movements [-1, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Found transposition pattern [5-7]: ['E', 'F', 'I'] with movements [-1, -1, 1]
    DEBUG:   Magnitude: 1, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [5-8]: ['E', 'F', 'I', 'J'] with movements [-1, -1, 1, 1]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [5-9]: ['E', 'F', 'I', 'J', 'G'] with movements [-1, -1, 1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+3) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1, 1], Negative section: [-1, -1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [6-8]: ['F', 'I', 'J'] with movements [-1, 1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [6-8]: ['F', 'I', 'J'] with movements [-1, 1, 1]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Testing segment [6-9]: ['F', 'I', 'J', 'G'] with movements [-1, 1, 1, -3]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [7-9]: ['I', 'J', 'G'] with movements [1, 1, -3]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Found transposition pattern [7-9]: ['I', 'J', 'G'] with movements [1, 1, -3]
    DEBUG:   Magnitude: 2, Perfect: False, Almost-perfect: True
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Found 8 total transposition patterns
    DEBUG: Pattern 1: [0-6] magnitude=3, perfect=False
    DEBUG: Pattern 2: [1-6] magnitude=3, perfect=False
    DEBUG: Pattern 3: [2-6] magnitude=3, perfect=False
    DEBUG: Pattern 4: [3-6] magnitude=3, perfect=False
    DEBUG: Pattern 5: [4-6] magnitude=3, perfect=False
    DEBUG: Pattern 6: [6-8] magnitude=2, perfect=False
    DEBUG: Pattern 7: [7-9] magnitude=2, perfect=False
    DEBUG: Pattern 8: [5-7] magnitude=1, perfect=False
  Found 8 transposition patterns
    DEBUG: Finding contiguity resolution for pattern with magnitude 3
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [0-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 3
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [1-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 3
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [2-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 3
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [3-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 3
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [4-6], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [6-8], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 2
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [7-9], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
    DEBUG: Finding contiguity resolution for pattern with magnitude 1
    DEBUG: Using EXTENDED PATTERN search [0-9]
    DEBUG: Original pattern [5-7], tolerance: 10
    DEBUG: Pattern is already perfect - no contiguity resolution needed
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 3, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 3, -1, -1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 3, -1, -1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 3, -1, -1, 1, 1]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 3, -1, -1, 1, 1, -3]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 3, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 3, -1, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 3, -1, -1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 3, -1, -1, 1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 3, -1, -1, 1, 1, -3]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 3, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 3, -1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 3, -1, -1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 3, -1, -1, 1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 3, -1, -1, 1, 1, -3]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 3]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 3, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 3, -1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 3, -1, -1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 3, -1, -1, 1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 3, -1, -1, 1, 1, -3]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [3, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [3, -1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [3, -1, -1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [3, -1, -1, 1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [3, -1, -1, 1, 1, -3]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, -1, 1, 1, -3]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, 1, -3]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, 1, -3]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -3]
     Length: 2
  Found 4 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene H at index 4: position=4, movement=3, target=7
   Found focus gene E at index 5: position=5, movement=-1, target=4
   Found focus gene F at index 6: position=6, movement=-1, target=5
   Found focus gene I at index 7: position=7, movement=1, target=8
   Found focus gene J at index 8: position=8, movement=1, target=9
   Found focus gene G at index 9: position=9, movement=-3, target=6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: D
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: D
   movement1: 0
   gene2: H
   movement2: 3
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: H
   movement1: 3
   gene2: E
   movement2: -1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: H(3) <-> E(-1)
   H would move from pos 4 to pos 5
   E would move from pos 5 to pos 4
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 4
   gene1: H
   movement1: 3
   gene2: E
   movement2: -1
🔍 FOCUS GENE ADJACENCY SELECTED: H(3) <-> E(-1) at indices 4-5
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: E
   movement1: -1
   gene2: F
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: F(-1) <-> I(1)
   F would move from pos 6 to pos 7
   I would move from pos 7 to pos 6
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
🔍 FOCUS GENE ADJACENCY SELECTED: F(-1) <-> I(1) at indices 6-7
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: I
   movement1: 1
   gene2: J
   movement2: 1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: J(1) <-> G(-3)
   J would move from pos 8 to pos 9
   G would move from pos 9 to pos 8
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
🔍 FOCUS GENE ADJACENCY SELECTED: J(1) <-> G(-3) at indices 8-9
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 3
  Found 3 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(5, 8, 2), (4, 5, 1), (6, 7, 1), (8, 9, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(5, 8, 2), (4, 5, 1), (6, 7, 1), (8, 9, 1)]
  DEBUG: Processing flip pattern 5-8 (size: 2)
  DEBUG: Flip 5-8 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(5, 8)}
  DEBUG: Processing flip pattern 4-5 (size: 1)
  DEBUG: Flip 4-5 overlaps with 5-8
  DEBUG: Flip 4-5 REJECTED - overlap detected
  DEBUG: Processing flip pattern 6-7 (size: 1)
  DEBUG: Flip 6-7 overlaps with 5-8
  DEBUG: Flip 6-7 REJECTED - overlap detected
  DEBUG: Processing flip pattern 8-9 (size: 1)
  DEBUG: Flip 8-9 overlaps with 5-8
  DEBUG: Flip 8-9 REJECTED - overlap detected
  DEBUG: find_non_overlapping_flips - Final result: [(5, 8, 2)]
  Non-overlapping flips: 1
  DEBUG: Testing 1 flips for biological validity...
  FLIP BEFORE: [('E', -1), ('F', -1), ('I', 1), ('J', 1)]
  🔍 SEQUENCE DEBUG - Segment [5-8]:
     Segment length: 4
     All genes in segment:
       [5]: E at pos=5, move=-1, target=4 🔍
       [6]: F at pos=6, move=-1, target=5 🔍
       [7]: I at pos=7, move=1, target=8 🔍
       [8]: J at pos=8, move=1, target=9 🔍
     🔍 FOCUS GENES in this segment: ['E', 'F', 'I', 'J']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [5-8]: 4 genes
     Magnitude before: 4
     Individual movements: [('E', -1), ('F', -1), ('I', 1), ('J', 1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      J: 1 → 4 (|4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: J
   Position: 5 → 5
   Movement: 1 → 4
   Target: 9
   Context: flip[5-8]
   Progress: 4/4 units remaining
      I: 1 → 2 (|2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 6 → 6
   Movement: 1 → 2
   Target: 8
   Context: flip[5-8]
   Progress: 2/2 units remaining
      F: -1 → -2 (|-2| = 2)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 7 → 7
   Movement: -1 → -2
   Target: 5
   Context: flip[5-8]
   Progress: 2/2 units remaining
      E: -1 → -4 (|-4| = 4)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: E
   Position: 8 → 8
   Movement: -1 → -4
   Target: 4
   Context: flip[5-8]
   Progress: 4/4 units remaining
     Magnitude after: 12
     Magnitude change: 8
  FLIP AFTER:  [('J', 4), ('I', 2), ('F', -2), ('E', -4)]
    Flip rejected: 10 -> 18 (increase: +8.00)
      Sample genes: ['E', 'F', 'I'] with movements: [-1, -1, 1]
  Checking adjacency patterns...
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene H at index 4: position=4, movement=3, target=7
   Found focus gene E at index 5: position=5, movement=-1, target=4
   Found focus gene F at index 6: position=6, movement=-1, target=5
   Found focus gene I at index 7: position=7, movement=1, target=8
   Found focus gene J at index 8: position=8, movement=1, target=9
   Found focus gene G at index 9: position=9, movement=-3, target=6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: D
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: D
   movement1: 0
   gene2: H
   movement2: 3
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: H
   movement1: 3
   gene2: E
   movement2: -1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: H(3) <-> E(-1)
   H would move from pos 4 to pos 5
   E would move from pos 5 to pos 4
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 4
   gene1: H
   movement1: 3
   gene2: E
   movement2: -1
🔍 FOCUS GENE ADJACENCY SELECTED: H(3) <-> E(-1) at indices 4-5
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: E
   movement1: -1
   gene2: F
   movement2: -1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: F(-1) <-> I(1)
   F would move from pos 6 to pos 7
   I would move from pos 7 to pos 6
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
🔍 FOCUS GENE ADJACENCY SELECTED: F(-1) <-> I(1) at indices 6-7
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: I
   movement1: 1
   gene2: J
   movement2: 1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: J(1) <-> G(-3)
   J would move from pos 8 to pos 9
   G would move from pos 9 to pos 8
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 8
   gene1: J
   movement1: 1
   gene2: G
   movement2: -3
🔍 FOCUS GENE ADJACENCY SELECTED: J(1) <-> G(-3) at indices 8-9
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 3
  Found 3 adjacency patterns
 FOCUS_GENE_DEBUG: Starting find_non_overlapping_adjacencies
   total_adjacencies: 3
   sequence_length: 10
  DEBUG: Focus gene involved: True
 FOCUS_GENE_DEBUG: Focus gene adjacency in non_overlapping check
   index1: 4
   index2: 5
   gene1: H
   gene2: E
   index1_used: False
   index2_used: False
   will_include: True
  DEBUG: Updated used_indices: {4, 5}
 FOCUS_GENE_DEBUG: Focus gene adjacency INCLUDED in non_overlapping
   index1: 4
   index2: 5
   gene1: H
   gene2: E
   gene1_movement: 3
   gene2_movement: -1
  DEBUG: Focus gene involved: True
 FOCUS_GENE_DEBUG: Focus gene adjacency in non_overlapping check
   index1: 6
   index2: 7
   gene1: F
   gene2: I
   index1_used: False
   index2_used: False
   will_include: True
  DEBUG: Updated used_indices: {4, 5, 6, 7}
 FOCUS_GENE_DEBUG: Focus gene adjacency INCLUDED in non_overlapping
   index1: 6
   index2: 7
   gene1: F
   gene2: I
   gene1_movement: -1
   gene2_movement: 1
  DEBUG: Focus gene involved: True
 FOCUS_GENE_DEBUG: Focus gene adjacency in non_overlapping check
   index1: 8
   index2: 9
   gene1: J
   gene2: G
   index1_used: False
   index2_used: False
   will_include: True
  DEBUG: Updated used_indices: {4, 5, 6, 7, 8, 9}
 FOCUS_GENE_DEBUG: Focus gene adjacency INCLUDED in non_overlapping
   index1: 8
   index2: 9
   gene1: J
   gene2: G
   gene1_movement: 1
   gene2_movement: -3
  DEBUG: Final non_overlapping result: [(4, 5), (6, 7), (8, 9)]
 FOCUS_GENE_DEBUG: Finished find_non_overlapping_adjacencies
   non_overlapping_count: 3
  Non-overlapping adjacencies: 3
 FOCUS_GENE_DEBUG: Iteration 5 - Starting adjacency evaluation
   total_adjacencies: 3
    🔧 RECALCULATING movements within adjacency:
      E: -1 → 0
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: E
   Position: 4 → 4
   Movement: -1 → 0
   Target: 4
   Context: adjacency[4-5]
   Progress: 0/0 units remaining
      H: 3 → 2
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: H
   Position: 5 → 5
   Movement: 3 → 2
   Target: 7
   Context: adjacency[4-5]
   Progress: 2/2 units remaining
 FOCUS_GENE_DEBUG: Iteration 5 - Adjacency evaluation loop
   index1: 4
   index2: 5
   gene1: H
   gene2: E
   focus_gene_involved: True
   current_movement: 10
   new_movement: 8
   movement_change: -2
 DEBUG: Evaluating adjacency 4-5: H(3) <-> E(-1)
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency evaluation
   gene1: H
   gene2: E
   index1: 4
   index2: 5
   current_movement: 10
   new_movement: 8
   movement_change: -2
   threshold: 0.0
   will_accept: True
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency evaluation
   gene1: H
   gene2: E
   index1: 4
   index2: 5
   current_movement: 10
   new_movement: 8
   movement_change: -2
   threshold: 0.0
   will_accept: True
    Adjacency accepted: 10 -> 8
    🔧 RECALCULATING movements within adjacency:
      I: 1 → 2
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: I
   Position: 6 → 6
   Movement: 1 → 2
   Target: 8
   Context: adjacency[6-7]
   Progress: 2/2 units remaining
      F: -1 → -2
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: F
   Position: 7 → 7
   Movement: -1 → -2
   Target: 5
   Context: adjacency[6-7]
   Progress: 2/2 units remaining
 FOCUS_GENE_DEBUG: Iteration 5 - Adjacency evaluation loop
   index1: 6
   index2: 7
   gene1: F
   gene2: I
   focus_gene_involved: True
   current_movement: 10
   new_movement: 12
   movement_change: 2
 DEBUG: Evaluating adjacency 6-7: F(-1) <-> I(1)
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency evaluation
   gene1: F
   gene2: I
   index1: 6
   index2: 7
   current_movement: 10
   new_movement: 12
   movement_change: 2
   threshold: 0.0
   will_accept: False
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency evaluation
   gene1: F
   gene2: I
   index1: 6
   index2: 7
   current_movement: 10
   new_movement: 12
   movement_change: 2
   threshold: 0.0
   will_accept: False
    Adjacency rejected: F(-1)<->I(1) increase: +2.00
      Pattern: [-1, 1] - should be opposite signs for adjacency inversion
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency REJECTED
   gene1: F
   gene2: I
   move1: -1
   move2: 1
   movement_change: 2
   threshold: 0.0
    🔧 RECALCULATING movements within adjacency:
      G: -3 → -2
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: G
   Position: 8 → 8
   Movement: -3 → -2
   Target: 6
   Context: adjacency[8-9]
   Progress: 2/2 units remaining
      J: 1 → 0
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: J
   Position: 9 → 9
   Movement: 1 → 0
   Target: 9
   Context: adjacency[8-9]
   Progress: 0/0 units remaining
 FOCUS_GENE_DEBUG: Iteration 5 - Adjacency evaluation loop
   index1: 8
   index2: 9
   gene1: J
   gene2: G
   focus_gene_involved: True
   current_movement: 10
   new_movement: 8
   movement_change: -2
 DEBUG: Evaluating adjacency 8-9: J(1) <-> G(-3)
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency evaluation
   gene1: J
   gene2: G
   index1: 8
   index2: 9
   current_movement: 10
   new_movement: 8
   movement_change: -2
   threshold: 0.0
   will_accept: True
 FOCUS_GENE_DEBUG: Iteration 5 - Focus gene adjacency evaluation
   gene1: J
   gene2: G
   index1: 8
   index2: 9
   current_movement: 10
   new_movement: 8
   movement_change: -2
   threshold: 0.0
   will_accept: True
    Adjacency accepted: 10 -> 8
 FOCUS_GENE_DEBUG: Iteration 5 - Finished adjacency evaluation
   valid_adjacencies: 2
🔍 SEGMENT INDEPENDENCE: Validating 2 adjacency operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 3 segment overlaps found:
       - H vs E: overlap at [4-5]
         (adjacency[4,5] conflicts with adjacency[4,5])
       - H vs G: overlap at [6-7]
         (adjacency[4,5] conflicts with adjacency[8,9])
       - J vs G: overlap at [8-9]
         (adjacency[8,9] conflicts with adjacency[8,9])
🔍 SEGMENT INDEPENDENCE: Validating 2 adjacency operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 3 segment overlaps found:
       - H vs E: overlap at [4-5]
         (adjacency[4,5] conflicts with adjacency[4,5])
       - H vs G: overlap at [6-7]
         (adjacency[4,5] conflicts with adjacency[8,9])
       - J vs G: overlap at [8-9]
         (adjacency[8,9] conflicts with adjacency[8,9])
  🔄 SEQUENTIAL FALLBACK: Applying 2 interdependent adjacencys one by one
    Step 1/2: Applying (4, 5)
    🔧 RECALCULATING movements within adjacency:
      E: -1 → 0
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: E
   Position: 4 → 4
   Movement: -1 → 0
   Target: 4
   Context: adjacency[4-5]
   Progress: 0/0 units remaining
      H: 3 → 2
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: H
   Position: 5 → 5
   Movement: 3 → 2
   Target: 7
   Context: adjacency[4-5]
   Progress: 2/2 units remaining
    Step 2/2: Applying (8, 9)
    🔧 RECALCULATING movements within adjacency:
      G: -3 → -2
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: G
   Position: 8 → 8
   Movement: -3 → -2
   Target: 6
   Context: adjacency[8-9]
   Progress: 2/2 units remaining
      J: 1 → 0
🔍 FOCUS GENE OPERATION: ADJACENCY
   Gene: J
   Position: 9 → 9
   Movement: 1 → 0
   Target: 9
   Context: adjacency[8-9]
   Progress: 0/0 units remaining
  Applied 2 adjacency inversions
Iteration 5: Applied 1 inversions
  Movement recalculation completed
Iteration 6: Starting...
  DEBUG A - Iteration 6:
    Current position: 0
    Current movement: 0
    Target position: 0
    Distance to target: 0
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 0
   movement: 0
   target: 0
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG B - Iteration 6:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG C - Iteration 6:
    Current position: 2
    Current movement: 0
    Target position: 2
    Distance to target: 0
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 2
   movement: 0
   target: 2
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG D - Iteration 6:
    Current position: 3
    Current movement: 0
    Target position: 3
    Distance to target: 0
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 3
   movement: 0
   target: 3
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG E - Iteration 6:
    Current position: 4
    Current movement: 0
    Target position: 4
    Distance to target: 0
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 4
   movement: 0
   target: 4
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG H - Iteration 6:
    Current position: 5
    Current movement: 2
    Target position: 7
    Distance to target: 2
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 5
   movement: 2
   target: 7
   distance_to_target: 2
    📉 DEGRADING (movement increased)
  DEBUG F - Iteration 6:
    Current position: 6
    Current movement: -1
    Target position: 5
    Distance to target: -1
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 6
   movement: -1
   target: 5
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 6:
    Current position: 7
    Current movement: 1
    Target position: 8
    Distance to target: 1
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 7
   movement: 1
   target: 8
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 6:
    Current position: 8
    Current movement: -2
    Target position: 6
    Distance to target: -2
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 8
   movement: -2
   target: 6
   distance_to_target: -2
    📉 DEGRADING (movement increased)
  DEBUG J - Iteration 6:
    Current position: 9
    Current movement: 0
    Target position: 9
    Distance to target: 0
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 6 start
   position: 9
   movement: 0
   target: 9
   distance_to_target: 0
    ✅ CONVERGED!
  CONVERGENCE STATUS:
    Total movement: 6.00
    Non-zero movements: 4 (sample: [2, -1, 1, -2])
    Large movements (|>2|): 0
    Sum of + movements: 3.00 (2 genes)
    Sum of - movements: 3.00 (2 genes)
    Movement balance: 0.00
    Movement reduction: 4.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['A', 'B', 'C'] with movements [0, 0, 0]
    DEBUG: Testing segment [0-3]: ['A', 'B', 'C', 'D'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [0-4]: ['A', 'B', 'C', 'D', 'E'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-5]: ['A', 'B', 'C', 'D', 'E', 'H'] with movements [0, 0, 0, 0, 0, 2]
    DEBUG: Testing segment [0-6]: ['A', 'B', 'C', 'D', 'E', 'H', 'F'] with movements [0, 0, 0, 0, 0, 2, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-7]: ['A', 'B', 'C', 'D', 'E', 'H', 'F', 'I'] with movements [0, 0, 0, 0, 0, 2, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [2, 1], Negative section: [-1]
    DEBUG: Testing segment [0-8]: ['A', 'B', 'C', 'D', 'E', 'H', 'F', 'I', 'G'] with movements [0, 0, 0, 0, 0, 2, -1, 1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [0-9]: ['A', 'B', 'C', 'D', 'E', 'H', 'F', 'I', 'G', 'J'] with movements [0, 0, 0, 0, 0, 2, -1, 1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [1-3]: ['B', 'C', 'D'] with movements [0, 0, 0]
    DEBUG: Testing segment [1-4]: ['B', 'C', 'D', 'E'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [1-5]: ['B', 'C', 'D', 'E', 'H'] with movements [0, 0, 0, 0, 2]
    DEBUG: Testing segment [1-6]: ['B', 'C', 'D', 'E', 'H', 'F'] with movements [0, 0, 0, 0, 2, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-7]: ['B', 'C', 'D', 'E', 'H', 'F', 'I'] with movements [0, 0, 0, 0, 2, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [2, 1], Negative section: [-1]
    DEBUG: Testing segment [1-8]: ['B', 'C', 'D', 'E', 'H', 'F', 'I', 'G'] with movements [0, 0, 0, 0, 2, -1, 1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [1-9]: ['B', 'C', 'D', 'E', 'H', 'F', 'I', 'G', 'J'] with movements [0, 0, 0, 0, 2, -1, 1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [2-4]: ['C', 'D', 'E'] with movements [0, 0, 0]
    DEBUG: Testing segment [2-5]: ['C', 'D', 'E', 'H'] with movements [0, 0, 0, 2]
    DEBUG: Testing segment [2-6]: ['C', 'D', 'E', 'H', 'F'] with movements [0, 0, 0, 2, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-7]: ['C', 'D', 'E', 'H', 'F', 'I'] with movements [0, 0, 0, 2, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [2, 1], Negative section: [-1]
    DEBUG: Testing segment [2-8]: ['C', 'D', 'E', 'H', 'F', 'I', 'G'] with movements [0, 0, 0, 2, -1, 1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [2-9]: ['C', 'D', 'E', 'H', 'F', 'I', 'G', 'J'] with movements [0, 0, 0, 2, -1, 1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [3-5]: ['D', 'E', 'H'] with movements [0, 0, 2]
    DEBUG: Testing segment [3-6]: ['D', 'E', 'H', 'F'] with movements [0, 0, 2, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [3-7]: ['D', 'E', 'H', 'F', 'I'] with movements [0, 0, 2, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [2, 1], Negative section: [-1]
    DEBUG: Testing segment [3-8]: ['D', 'E', 'H', 'F', 'I', 'G'] with movements [0, 0, 2, -1, 1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [3-9]: ['D', 'E', 'H', 'F', 'I', 'G', 'J'] with movements [0, 0, 2, -1, 1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [4-6]: ['E', 'H', 'F'] with movements [0, 2, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [4-7]: ['E', 'H', 'F', 'I'] with movements [0, 2, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [2, 1], Negative section: [-1]
    DEBUG: Testing segment [4-8]: ['E', 'H', 'F', 'I', 'G'] with movements [0, 2, -1, 1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [4-9]: ['E', 'H', 'F', 'I', 'G', 'J'] with movements [0, 2, -1, 1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [5-7]: ['H', 'F', 'I'] with movements [2, -1, 1]
    DEBUG: ✅ Non-symmetrical segment count (2+1) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=False, negative_same=True
    DEBUG:   Positive section: [2, 1], Negative section: [-1]
    DEBUG: Testing segment [5-8]: ['H', 'F', 'I', 'G'] with movements [2, -1, 1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Testing segment [5-9]: ['H', 'F', 'I', 'G', 'J'] with movements [2, -1, 1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (2+2), likely inversion
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [6-8]: ['F', 'I', 'G'] with movements [-1, 1, -2]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1], Negative section: [-1, -2]
    DEBUG: Testing segment [6-9]: ['F', 'I', 'G', 'J'] with movements [-1, 1, -2, 0]
    DEBUG: ✅ Non-symmetrical segment count (1+2) - checking further...
    DEBUG: Rejecting pattern - not same values: positive_same=True, negative_same=False
    DEBUG:   Positive section: [1], Negative section: [-1, -2]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [7-9]: ['I', 'G', 'J'] with movements [1, -2, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Found 0 total transposition patterns
  Found 0 transposition patterns
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 2]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 2, -1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 2, -1, 1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 2, -1, 1, -2]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 2, -1, 1, -2, 0]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 2]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 2, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 2, -1, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 2, -1, 1, -2]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 2, -1, 1, -2, 0]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 2]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 2, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 2, -1, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 2, -1, 1, -2]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 2, -1, 1, -2, 0]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 2]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 2, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 2, -1, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 2, -1, 1, -2]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 2, -1, 1, -2, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 2]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 2, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 2, -1, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 2, -1, 1, -2]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 2, -1, 1, -2, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [2, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [2, -1, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [2, -1, 1, -2]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [2, -1, 1, -2, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, -2]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 1, -2, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -2]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -2, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-2, 0]
     Length: 2
  Found 3 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene E at index 4: position=4, movement=0, target=4
   Found focus gene H at index 5: position=5, movement=2, target=7
   Found focus gene F at index 6: position=6, movement=-1, target=5
   Found focus gene I at index 7: position=7, movement=1, target=8
   Found focus gene G at index 8: position=8, movement=-2, target=6
   Found focus gene J at index 9: position=9, movement=0, target=9
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: D
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: D
   movement1: 0
   gene2: E
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: E
   movement1: 0
   gene2: H
   movement2: 2
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: H
   movement1: 2
   gene2: F
   movement2: -1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: H(2) <-> F(-1)
   H would move from pos 5 to pos 6
   F would move from pos 6 to pos 5
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 5
   gene1: H
   movement1: 2
   gene2: F
   movement2: -1
🔍 FOCUS GENE ADJACENCY SELECTED: H(2) <-> F(-1) at indices 5-6
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: F(-1) <-> I(1)
   F would move from pos 6 to pos 7
   I would move from pos 7 to pos 6
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 6
   gene1: F
   movement1: -1
   gene2: I
   movement2: 1
🔍 FOCUS GENE ADJACENCY SELECTED: F(-1) <-> I(1) at indices 6-7
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: I
   movement1: 1
   gene2: G
   movement2: -2
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: I(1) <-> G(-2)
   I would move from pos 7 to pos 8
   G would move from pos 8 to pos 7
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 7
   gene1: I
   movement1: 1
   gene2: G
   movement2: -2
🔍 FOCUS GENE ADJACENCY SELECTED: I(1) <-> G(-2) at indices 7-8
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: G
   movement1: -2
   gene2: J
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 3
  Found 3 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(5, 6, 1), (6, 7, 1), (7, 8, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(5, 6, 1), (6, 7, 1), (7, 8, 1)]
  DEBUG: Processing flip pattern 5-6 (size: 1)
  DEBUG: Flip 5-6 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(5, 6)}
  DEBUG: Processing flip pattern 6-7 (size: 1)
  DEBUG: Flip 6-7 overlaps with 5-6
  DEBUG: Flip 6-7 REJECTED - overlap detected
  DEBUG: Processing flip pattern 7-8 (size: 1)
  DEBUG: Flip 7-8 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(5, 6), (7, 8)}
  DEBUG: find_non_overlapping_flips - Final result: [(5, 6, 1), (7, 8, 1)]
  Non-overlapping flips: 2
  DEBUG: Testing 2 flips for biological validity...
  FLIP BEFORE: [('H', 2), ('F', -1)]
  🔍 SEQUENCE DEBUG - Segment [5-6]:
     Segment length: 2
     All genes in segment:
       [5]: H at pos=5, move=2, target=7 🔍
       [6]: F at pos=6, move=-1, target=5 🔍
     🔍 FOCUS GENES in this segment: ['H', 'F']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [5-6]: 2 genes
     Magnitude before: 3
     Individual movements: [('H', 2), ('F', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      F: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 5 → 5
   Movement: -1 → 0
   Target: 5
   Context: flip[5-6]
   Progress: 0/0 units remaining
      H: 2 → 1 (|1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 6 → 6
   Movement: 2 → 1
   Target: 7
   Context: flip[5-6]
   Progress: 1/1 units remaining
     Magnitude after: 1
     Magnitude change: -2
  FLIP AFTER:  [('F', 0), ('H', 1)]
    Flip accepted: 6 -> 4
  FLIP BEFORE: [('I', 1), ('G', -2)]
  🔍 SEQUENCE DEBUG - Segment [7-8]:
     Segment length: 2
     All genes in segment:
       [7]: I at pos=7, move=1, target=8 🔍
       [8]: G at pos=8, move=-2, target=6 🔍
     🔍 FOCUS GENES in this segment: ['I', 'G']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [7-8]: 2 genes
     Magnitude before: 3
     Individual movements: [('I', 1), ('G', -2)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      G: -2 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: G
   Position: 7 → 7
   Movement: -2 → -1
   Target: 6
   Context: flip[7-8]
   Progress: 1/1 units remaining
      I: 1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 8 → 8
   Movement: 1 → 0
   Target: 8
   Context: flip[7-8]
   Progress: 0/0 units remaining
     Magnitude after: 1
     Magnitude change: -2
  FLIP AFTER:  [('G', -1), ('I', 0)]
    Flip accepted: 6 -> 4
🔍 SEGMENT INDEPENDENCE: Validating 2 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 5 segment overlaps found:
       - H vs F: overlap at [5-6]
         (flip[5:6] conflicts with flip[5:6])
       - H vs I: overlap at [7-7]
         (flip[5:6] conflicts with flip[7:8])
       - H vs G: overlap at [6-7]
         (flip[5:6] conflicts with flip[7:8])
       - F vs G: overlap at [6-6]
         (flip[5:6] conflicts with flip[7:8])
       - I vs G: overlap at [7-8]
         (flip[7:8] conflicts with flip[7:8])
🔍 SEGMENT INDEPENDENCE: Validating 2 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 5 segment overlaps found:
       - H vs F: overlap at [5-6]
         (flip[5:6] conflicts with flip[5:6])
       - H vs I: overlap at [7-7]
         (flip[5:6] conflicts with flip[7:8])
       - H vs G: overlap at [6-7]
         (flip[5:6] conflicts with flip[7:8])
       - F vs G: overlap at [6-6]
         (flip[5:6] conflicts with flip[7:8])
       - I vs G: overlap at [7-8]
         (flip[7:8] conflicts with flip[7:8])
  🔄 SEQUENTIAL FALLBACK: Applying 2 interdependent flips one by one
    Step 1/2: Applying (5, 6, 1)
  FLIP BEFORE: [('H', 2), ('F', -1)]
  🔍 SEQUENCE DEBUG - Segment [5-6]:
     Segment length: 2
     All genes in segment:
       [5]: H at pos=5, move=2, target=7 🔍
       [6]: F at pos=6, move=-1, target=5 🔍
     🔍 FOCUS GENES in this segment: ['H', 'F']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [5-6]: 2 genes
     Magnitude before: 3
     Individual movements: [('H', 2), ('F', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      F: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: F
   Position: 5 → 5
   Movement: -1 → 0
   Target: 5
   Context: flip[5-6]
   Progress: 0/0 units remaining
      H: 2 → 1 (|1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 6 → 6
   Movement: 2 → 1
   Target: 7
   Context: flip[5-6]
   Progress: 1/1 units remaining
     Magnitude after: 1
     Magnitude change: -2
  FLIP AFTER:  [('F', 0), ('H', 1)]
    Step 2/2: Applying (7, 8, 1)
  FLIP BEFORE: [('I', 1), ('G', -2)]
  🔍 SEQUENCE DEBUG - Segment [7-8]:
     Segment length: 2
     All genes in segment:
       [7]: I at pos=7, move=1, target=8 🔍
       [8]: G at pos=8, move=-2, target=6 🔍
     🔍 FOCUS GENES in this segment: ['I', 'G']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [7-8]: 2 genes
     Magnitude before: 3
     Individual movements: [('I', 1), ('G', -2)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      G: -2 → -1 (|-1| = 1)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: G
   Position: 7 → 7
   Movement: -2 → -1
   Target: 6
   Context: flip[7-8]
   Progress: 1/1 units remaining
      I: 1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: I
   Position: 8 → 8
   Movement: 1 → 0
   Target: 8
   Context: flip[7-8]
   Progress: 0/0 units remaining
     Magnitude after: 1
     Magnitude change: -2
  FLIP AFTER:  [('G', -1), ('I', 0)]
  Applied 2 flip inversions
Iteration 6: Applied 1 inversions
  Movement recalculation completed
Iteration 7: Starting...
  DEBUG A - Iteration 7:
    Current position: 0
    Current movement: 0
    Target position: 0
    Distance to target: 0
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 0
   movement: 0
   target: 0
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG B - Iteration 7:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG C - Iteration 7:
    Current position: 2
    Current movement: 0
    Target position: 2
    Distance to target: 0
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 2
   movement: 0
   target: 2
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG D - Iteration 7:
    Current position: 3
    Current movement: 0
    Target position: 3
    Distance to target: 0
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 3
   movement: 0
   target: 3
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG E - Iteration 7:
    Current position: 4
    Current movement: 0
    Target position: 4
    Distance to target: 0
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 4
   movement: 0
   target: 4
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG F - Iteration 7:
    Current position: 5
    Current movement: 0
    Target position: 5
    Distance to target: 0
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 5
   movement: 0
   target: 5
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG H - Iteration 7:
    Current position: 6
    Current movement: 1
    Target position: 7
    Distance to target: 1
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 6
   movement: 1
   target: 7
   distance_to_target: 1
    📉 DEGRADING (movement increased)
  DEBUG G - Iteration 7:
    Current position: 7
    Current movement: -1
    Target position: 6
    Distance to target: -1
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 7
   movement: -1
   target: 6
   distance_to_target: -1
    📉 DEGRADING (movement increased)
  DEBUG I - Iteration 7:
    Current position: 8
    Current movement: 0
    Target position: 8
    Distance to target: 0
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 8
   movement: 0
   target: 8
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG J - Iteration 7:
    Current position: 9
    Current movement: 0
    Target position: 9
    Distance to target: 0
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 7 start
   position: 9
   movement: 0
   target: 9
   distance_to_target: 0
    ✅ CONVERGED!
  CONVERGENCE STATUS:
    Total movement: 2.00
    Non-zero movements: 2 (sample: [1, -1])
    Large movements (|>2|): 0
    Sum of + movements: 1.00 (1 genes)
    Sum of - movements: 1.00 (1 genes)
    Movement balance: 0.00
    Movement reduction: 4.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['A', 'B', 'C'] with movements [0, 0, 0]
    DEBUG: Testing segment [0-3]: ['A', 'B', 'C', 'D'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [0-4]: ['A', 'B', 'C', 'D', 'E'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-5]: ['A', 'B', 'C', 'D', 'E', 'F'] with movements [0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-6]: ['A', 'B', 'C', 'D', 'E', 'F', 'H'] with movements [0, 0, 0, 0, 0, 0, 1]
    DEBUG: Testing segment [0-7]: ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'G'] with movements [0, 0, 0, 0, 0, 0, 1, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-8]: ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'G', 'I'] with movements [0, 0, 0, 0, 0, 0, 1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [0-9]: ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'G', 'I', 'J'] with movements [0, 0, 0, 0, 0, 0, 1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-3]: ['B', 'C', 'D'] with movements [0, 0, 0]
    DEBUG: Testing segment [1-4]: ['B', 'C', 'D', 'E'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [1-5]: ['B', 'C', 'D', 'E', 'F'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [1-6]: ['B', 'C', 'D', 'E', 'F', 'H'] with movements [0, 0, 0, 0, 0, 1]
    DEBUG: Testing segment [1-7]: ['B', 'C', 'D', 'E', 'F', 'H', 'G'] with movements [0, 0, 0, 0, 0, 1, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-8]: ['B', 'C', 'D', 'E', 'F', 'H', 'G', 'I'] with movements [0, 0, 0, 0, 0, 1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [1-9]: ['B', 'C', 'D', 'E', 'F', 'H', 'G', 'I', 'J'] with movements [0, 0, 0, 0, 0, 1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-4]: ['C', 'D', 'E'] with movements [0, 0, 0]
    DEBUG: Testing segment [2-5]: ['C', 'D', 'E', 'F'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [2-6]: ['C', 'D', 'E', 'F', 'H'] with movements [0, 0, 0, 0, 1]
    DEBUG: Testing segment [2-7]: ['C', 'D', 'E', 'F', 'H', 'G'] with movements [0, 0, 0, 0, 1, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-8]: ['C', 'D', 'E', 'F', 'H', 'G', 'I'] with movements [0, 0, 0, 0, 1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [2-9]: ['C', 'D', 'E', 'F', 'H', 'G', 'I', 'J'] with movements [0, 0, 0, 0, 1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [3-5]: ['D', 'E', 'F'] with movements [0, 0, 0]
    DEBUG: Testing segment [3-6]: ['D', 'E', 'F', 'H'] with movements [0, 0, 0, 1]
    DEBUG: Testing segment [3-7]: ['D', 'E', 'F', 'H', 'G'] with movements [0, 0, 0, 1, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [3-8]: ['D', 'E', 'F', 'H', 'G', 'I'] with movements [0, 0, 0, 1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [3-9]: ['D', 'E', 'F', 'H', 'G', 'I', 'J'] with movements [0, 0, 0, 1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [4-6]: ['E', 'F', 'H'] with movements [0, 0, 1]
    DEBUG: Testing segment [4-7]: ['E', 'F', 'H', 'G'] with movements [0, 0, 1, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [4-8]: ['E', 'F', 'H', 'G', 'I'] with movements [0, 0, 1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [4-9]: ['E', 'F', 'H', 'G', 'I', 'J'] with movements [0, 0, 1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [5-7]: ['F', 'H', 'G'] with movements [0, 1, -1]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [5-8]: ['F', 'H', 'G', 'I'] with movements [0, 1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [5-9]: ['F', 'H', 'G', 'I', 'J'] with movements [0, 1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [6-8]: ['H', 'G', 'I'] with movements [1, -1, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [6-9]: ['H', 'G', 'I', 'J'] with movements [1, -1, 0, 0]
    DEBUG: Rejecting pattern - symmetrical segment count (1+1), likely inversion
    DEBUG: Testing segment [7-9]: ['G', 'I', 'J'] with movements [-1, 0, 0]
    DEBUG: Found 0 total transposition patterns
  Found 0 transposition patterns
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 1, -1]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 1, -1, 0]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 1, -1, 0, 0]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 1, -1]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 1, -1, 0]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 1, -1, 0, 0]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 1, -1]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 1, -1, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 1, -1, 0, 0]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 1, -1]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 1, -1, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 1, -1, 0, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 1, -1]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 1, -1, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 1, -1, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 1, -1]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 1, -1, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 1, -1, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -1]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -1, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [1, -1, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [-1, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  Found 1 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene E at index 4: position=4, movement=0, target=4
   Found focus gene F at index 5: position=5, movement=0, target=5
   Found focus gene H at index 6: position=6, movement=1, target=7
   Found focus gene G at index 7: position=7, movement=-1, target=6
   Found focus gene I at index 8: position=8, movement=0, target=8
   Found focus gene J at index 9: position=9, movement=0, target=9
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: D
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: D
   movement1: 0
   gene2: E
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: E
   movement1: 0
   gene2: F
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: F
   movement1: 0
   gene2: H
   movement2: 1
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: H
   movement1: 1
   gene2: G
   movement2: -1
   has_opposite_signs: True
🔍 FOCUS GENE ADJACENCY POTENTIAL: H(1) <-> G(-1)
   H would move from pos 6 to pos 7
   G would move from pos 7 to pos 6
 FOCUS_GENE_DEBUG: Focus gene adjacency FOUND at index 6
   gene1: H
   movement1: 1
   gene2: G
   movement2: -1
🔍 FOCUS GENE ADJACENCY SELECTED: H(1) <-> G(-1) at indices 6-7
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: G
   movement1: -1
   gene2: I
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: I
   movement1: 0
   gene2: J
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 1
  Found 1 adjacency patterns
  DEBUG: find_non_overlapping_flips - Input patterns: [(6, 7, 1)]
  DEBUG: find_non_overlapping_flips - Sorted patterns: [(6, 7, 1)]
  DEBUG: Processing flip pattern 6-7 (size: 1)
  DEBUG: Flip 6-7 ACCEPTED - added to non_overlapping
  DEBUG: Updated used_ranges: {(6, 7)}
  DEBUG: find_non_overlapping_flips - Final result: [(6, 7, 1)]
  Non-overlapping flips: 1
  DEBUG: Testing 1 flips for biological validity...
  FLIP BEFORE: [('H', 1), ('G', -1)]
  🔍 SEQUENCE DEBUG - Segment [6-7]:
     Segment length: 2
     All genes in segment:
       [6]: H at pos=6, move=1, target=7 🔍
       [7]: G at pos=7, move=-1, target=6 🔍
     🔍 FOCUS GENES in this segment: ['H', 'G']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [6-7]: 2 genes
     Magnitude before: 2
     Individual movements: [('H', 1), ('G', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      G: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: G
   Position: 6 → 6
   Movement: -1 → 0
   Target: 6
   Context: flip[6-7]
   Progress: 0/0 units remaining
      H: 1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 7 → 7
   Movement: 1 → 0
   Target: 7
   Context: flip[6-7]
   Progress: 0/0 units remaining
     Magnitude after: 0
     Magnitude change: -2
  FLIP AFTER:  [('G', 0), ('H', 0)]
    Flip accepted: 2 -> 0
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 1 segment overlaps found:
       - H vs G: overlap at [6-7]
         (flip[6:7] conflicts with flip[6:7])
🔍 SEGMENT INDEPENDENCE: Validating 1 flip operations
  ❌ SEGMENT INDEPENDENCE VIOLATED
     • 1 segment overlaps found:
       - H vs G: overlap at [6-7]
         (flip[6:7] conflicts with flip[6:7])
  🔄 SEQUENTIAL FALLBACK: Applying 1 interdependent flips one by one
    Step 1/1: Applying (6, 7, 1)
  FLIP BEFORE: [('H', 1), ('G', -1)]
  🔍 SEQUENCE DEBUG - Segment [6-7]:
     Segment length: 2
     All genes in segment:
       [6]: H at pos=6, move=1, target=7 🔍
       [7]: G at pos=7, move=-1, target=6 🔍
     🔍 FOCUS GENES in this segment: ['H', 'G']
  🔍 MAGNITUDE ANALYSIS - Before flip:
     Segment [6-7]: 2 genes
     Magnitude before: 2
     Individual movements: [('H', 1), ('G', -1)]
    🔧 RECALCULATING movements within flip:
  🔍 MAGNITUDE ANALYSIS - After flip:
     Individual movements after flip:
      G: -1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: G
   Position: 6 → 6
   Movement: -1 → 0
   Target: 6
   Context: flip[6-7]
   Progress: 0/0 units remaining
      H: 1 → 0 (|0| = 0)
🔍 FOCUS GENE OPERATION: FLIP
   Gene: H
   Position: 7 → 7
   Movement: 1 → 0
   Target: 7
   Context: flip[6-7]
   Progress: 0/0 units remaining
     Magnitude after: 0
     Magnitude change: -2
  FLIP AFTER:  [('G', 0), ('H', 0)]
  Applied 1 flip inversions
Iteration 7: Applied 1 inversions
  Movement recalculation completed
Iteration 8: Starting...
  DEBUG A - Iteration 8:
    Current position: 0
    Current movement: 0
    Target position: 0
    Distance to target: 0
    Target_positions[A]: 0
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 0
   movement: 0
   target: 0
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG B - Iteration 8:
    Current position: 1
    Current movement: 0
    Target position: 1
    Distance to target: 0
    Target_positions[B]: 1
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 1
   movement: 0
   target: 1
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG C - Iteration 8:
    Current position: 2
    Current movement: 0
    Target position: 2
    Distance to target: 0
    Target_positions[C]: 2
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 2
   movement: 0
   target: 2
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG D - Iteration 8:
    Current position: 3
    Current movement: 0
    Target position: 3
    Distance to target: 0
    Target_positions[D]: 3
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 3
   movement: 0
   target: 3
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG E - Iteration 8:
    Current position: 4
    Current movement: 0
    Target position: 4
    Distance to target: 0
    Target_positions[E]: 4
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 4
   movement: 0
   target: 4
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG F - Iteration 8:
    Current position: 5
    Current movement: 0
    Target position: 5
    Distance to target: 0
    Target_positions[F]: 5
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 5
   movement: 0
   target: 5
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG G - Iteration 8:
    Current position: 6
    Current movement: 0
    Target position: 6
    Distance to target: 0
    Target_positions[G]: 6
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 6
   movement: 0
   target: 6
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG H - Iteration 8:
    Current position: 7
    Current movement: 0
    Target position: 7
    Distance to target: 0
    Target_positions[H]: 7
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 7
   movement: 0
   target: 7
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG I - Iteration 8:
    Current position: 8
    Current movement: 0
    Target position: 8
    Distance to target: 0
    Target_positions[I]: 8
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 8
   movement: 0
   target: 8
   distance_to_target: 0
    ✅ CONVERGED!
  DEBUG J - Iteration 8:
    Current position: 9
    Current movement: 0
    Target position: 9
    Distance to target: 0
    Target_positions[J]: 9
 FOCUS_GENE_DEBUG: Iteration 8 start
   position: 9
   movement: 0
   target: 9
   distance_to_target: 0
    ✅ CONVERGED!
  CONVERGENCE STATUS:
    Total movement: 0.00
    Non-zero movements: 0 (sample: [])
    Large movements (|>2|): 0
    Sum of + movements: 0.00 (0 genes)
    Sum of - movements: 0.00 (0 genes)
    Movement balance: 0.00
    Movement reduction: 2.00
  Checking transposition patterns...
    DEBUG: Scanning for transposition patterns in sequence of length 10
    DEBUG: Testing segment [0-2]: ['A', 'B', 'C'] with movements [0, 0, 0]
    DEBUG: Testing segment [0-3]: ['A', 'B', 'C', 'D'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [0-4]: ['A', 'B', 'C', 'D', 'E'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-5]: ['A', 'B', 'C', 'D', 'E', 'F'] with movements [0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-6]: ['A', 'B', 'C', 'D', 'E', 'F', 'G'] with movements [0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-7]: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'] with movements [0, 0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-8]: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'] with movements [0, 0, 0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [0-9]: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'] with movements [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [1-3]: ['B', 'C', 'D'] with movements [0, 0, 0]
    DEBUG: Testing segment [1-4]: ['B', 'C', 'D', 'E'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [1-5]: ['B', 'C', 'D', 'E', 'F'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [1-6]: ['B', 'C', 'D', 'E', 'F', 'G'] with movements [0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [1-7]: ['B', 'C', 'D', 'E', 'F', 'G', 'H'] with movements [0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [1-8]: ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'] with movements [0, 0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [1-9]: ['B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'] with movements [0, 0, 0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [2-4]: ['C', 'D', 'E'] with movements [0, 0, 0]
    DEBUG: Testing segment [2-5]: ['C', 'D', 'E', 'F'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [2-6]: ['C', 'D', 'E', 'F', 'G'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [2-7]: ['C', 'D', 'E', 'F', 'G', 'H'] with movements [0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [2-8]: ['C', 'D', 'E', 'F', 'G', 'H', 'I'] with movements [0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [2-9]: ['C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'] with movements [0, 0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [3-5]: ['D', 'E', 'F'] with movements [0, 0, 0]
    DEBUG: Testing segment [3-6]: ['D', 'E', 'F', 'G'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [3-7]: ['D', 'E', 'F', 'G', 'H'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [3-8]: ['D', 'E', 'F', 'G', 'H', 'I'] with movements [0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [3-9]: ['D', 'E', 'F', 'G', 'H', 'I', 'J'] with movements [0, 0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [4-6]: ['E', 'F', 'G'] with movements [0, 0, 0]
    DEBUG: Testing segment [4-7]: ['E', 'F', 'G', 'H'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [4-8]: ['E', 'F', 'G', 'H', 'I'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [4-9]: ['E', 'F', 'G', 'H', 'I', 'J'] with movements [0, 0, 0, 0, 0, 0]
    DEBUG: Testing segment [5-7]: ['F', 'G', 'H'] with movements [0, 0, 0]
    DEBUG: Testing segment [5-8]: ['F', 'G', 'H', 'I'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [5-9]: ['F', 'G', 'H', 'I', 'J'] with movements [0, 0, 0, 0, 0]
    DEBUG: Testing segment [6-8]: ['G', 'H', 'I'] with movements [0, 0, 0]
    DEBUG: Testing segment [6-9]: ['G', 'H', 'I', 'J'] with movements [0, 0, 0, 0]
    DEBUG: Testing segment [7-9]: ['H', 'I', 'J'] with movements [0, 0, 0]
    DEBUG: Found 0 total transposition patterns
  Found 0 transposition patterns
  Checking flip patterns...
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0, 0]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0, 0, 0]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
     Length: 10
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0, 0]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0, 0, 0]
     Length: 9
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0, 0]
     Length: 8
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0, 0]
     Length: 7
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0, 0]
     Length: 6
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0, 0]
     Length: 5
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0, 0]
     Length: 4
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0, 0]
     Length: 3
  🔍 FLIP PATTERN ANALYSIS:
     Pattern: [0, 0]
     Length: 2
  Found 0 flip patterns
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene E at index 4: position=4, movement=0, target=4
   Found focus gene F at index 5: position=5, movement=0, target=5
   Found focus gene G at index 6: position=6, movement=0, target=6
   Found focus gene H at index 7: position=7, movement=0, target=7
   Found focus gene I at index 8: position=8, movement=0, target=8
   Found focus gene J at index 9: position=9, movement=0, target=9
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: D
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: D
   movement1: 0
   gene2: E
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: E
   movement1: 0
   gene2: F
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: F
   movement1: 0
   gene2: G
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: G
   movement1: 0
   gene2: H
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: H
   movement1: 0
   gene2: I
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: I
   movement1: 0
   gene2: J
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 0
  Found 0 adjacency patterns
  Checking adjacency patterns...
 FOCUS_GENE_DEBUG: Starting detect_adjacency_inversions
   sequence_length: 10
 FOCUS_GENE_DEBUG: Checking sequence input
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene E at index 4: position=4, movement=0, target=4
   Found focus gene F at index 5: position=5, movement=0, target=5
   Found focus gene G at index 6: position=6, movement=0, target=6
   Found focus gene H at index 7: position=7, movement=0, target=7
   Found focus gene I at index 8: position=8, movement=0, target=8
   Found focus gene J at index 9: position=9, movement=0, target=9
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 0
   gene1: A
   movement1: 0
   gene2: B
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 1
   gene1: B
   movement1: 0
   gene2: C
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 2
   gene1: C
   movement1: 0
   gene2: D
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 3
   gene1: D
   movement1: 0
   gene2: E
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 4
   gene1: E
   movement1: 0
   gene2: F
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 5
   gene1: F
   movement1: 0
   gene2: G
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 6
   gene1: G
   movement1: 0
   gene2: H
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 7
   gene1: H
   movement1: 0
   gene2: I
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Focus gene adjacency check at index 8
   gene1: I
   movement1: 0
   gene2: J
   movement2: 0
   has_opposite_signs: False
 FOCUS_GENE_DEBUG: Finished detect_adjacency_inversions
   total_adjacencies: 0
  No inversions found - terminating
Optimized iterative detection completed after 8 iterations
  Total events: 10
  Total gene inversions: 27
  Adjacency events: 2, Flip events: 8
    CONVERGENCE TYPE: Perfect convergence (all movements = 0)
 FOCUS_GENE_DEBUG: Algorithm completion - final state
   total_iterations: 8
   total_events: 10
   final_total_movement: 0
   converged: True
 FOCUS_GENE_DEBUG: Checking sequence final state
   Found focus gene A at index 0: position=0, movement=0, target=0
   Found focus gene B at index 1: position=1, movement=0, target=1
   Found focus gene C at index 2: position=2, movement=0, target=2
   Found focus gene D at index 3: position=3, movement=0, target=3
   Found focus gene E at index 4: position=4, movement=0, target=4
   Found focus gene F at index 5: position=5, movement=0, target=5
   Found focus gene G at index 6: position=6, movement=0, target=6
   Found focus gene H at index 7: position=7, movement=0, target=7
   Found focus gene I at index 8: position=8, movement=0, target=8
   Found focus gene J at index 9: position=9, movement=0, target=9

🔍 DEBUG: Focus genes final state after iteration 8:
  A: pos=0, movement=0, target=0
    ✅ CONVERGED!
  B: pos=1, movement=0, target=1
    ✅ CONVERGED!
  C: pos=2, movement=0, target=2
    ✅ CONVERGED!
  D: pos=3, movement=0, target=3
    ✅ CONVERGED!
  E: pos=4, movement=0, target=4
    ✅ CONVERGED!
  F: pos=5, movement=0, target=5
    ✅ CONVERGED!
  G: pos=6, movement=0, target=6
    ✅ CONVERGED!
  H: pos=7, movement=0, target=7
    ✅ CONVERGED!
  I: pos=8, movement=0, target=8
    ✅ CONVERGED!
  J: pos=9, movement=0, target=9
    ✅ CONVERGED!
  CONVERGENCE SUMMARY:
    Final total movement: 0.00
    Final non-zero movements: 0
    Final large movements (|>2|): 0
    Final sum of + movements: 0.00 (0 genes)
    Final sum of - movements: 0.00 (0 genes)
    Final movement balance: 0.00

==================================================
RESULTS
==================================================

=== FINAL STATE ===
Sequence: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
Movements: ['+0', '+0', '+0', '+0', '+0', '+0', '+0', '+0', '+0', '+0']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'E(+0)', 'F(+0)', 'G(+0)', 'H(+0)', 'I(+0)', 'J(+0)']

Total inversions applied: 10
Converged: True
Final total movement: 0

==================================================
SEQUENCE EVOLUTION THROUGH INVERSIONS
==================================================

--- INVERSION 1 ---
Type: flip
Flip indicator: 2
Segment length: 4
Positions: [1, 2, 3, 4]
Genes: ['B', 'A', 'J', 'I']
Gene inversions: 4
Sequence after inversion: ['H', 'B', 'A', 'J', 'I', 'F', 'E', 'D', 'C', 'G']
Movements: ['+7', '+0', '-2', '+6', '+4', '+0', '-2', '-4', '-6', '-3']
Formatted: ['H(+7)', 'B(+0)', 'A(-2)', 'J(+6)', 'I(+4)', 'F(+0)', 'E(-2)', 'D(-4)', 'C(-6)', 'G(-3)']
Pattern: TYPE 2 - Flip Pattern (Pos: [7, 6, 4], Neg: [-2, -2, -4, -6, -3])

--- INVERSION 2 ---
Type: flip
Flip indicator: 3
Segment length: 6
Positions: [3, 4, 5, 6, 7, 8]
Genes: ['C', 'D', 'E', 'F', 'I', 'J']
Gene inversions: 6
Sequence after inversion: ['H', 'B', 'A', 'C', 'D', 'E', 'F', 'I', 'J', 'G']
Movements: ['+7', '+0', '-2', '-1', '-1', '-1', '-1', '+1', '+1', '-3']
Formatted: ['H(+7)', 'B(+0)', 'A(-2)', 'C(-1)', 'D(-1)', 'E(-1)', 'F(-1)', 'I(+1)', 'J(+1)', 'G(-3)']
Pattern: TYPE 2 - Flip Pattern (Pos: [7, 1, 1], Neg: [-2, -1, -1, -1, -1, -3])

--- INVERSION 3 ---
Type: flip
Flip indicator: 1
Segment length: 3
Positions: [0, 1, 2]
Genes: ['A', 'B', 'H']
Gene inversions: 3
Sequence after inversion: ['A', 'B', 'H', 'C', 'D', 'E', 'F', 'I', 'J', 'G']
Movements: ['+0', '+0', '+5', '-1', '-1', '-1', '-1', '+1', '+1', '-3']
Formatted: ['A(+0)', 'B(+0)', 'H(+5)', 'C(-1)', 'D(-1)', 'E(-1)', 'F(-1)', 'I(+1)', 'J(+1)', 'G(-3)']
Pattern: TYPE 2 - Flip Pattern (Pos: [5, 1, 1], Neg: [-1, -1, -1, -1, -3])

--- INVERSION 4 ---
Type: flip
Flip indicator: 1
Segment length: 2
Positions: [2, 3]
Genes: ['C', 'H']
Gene inversions: 2
Sequence after inversion: ['A', 'B', 'C', 'H', 'D', 'E', 'F', 'I', 'J', 'G']
Movements: ['+0', '+0', '+0', '+4', '-1', '-1', '-1', '+1', '+1', '-3']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'H(+4)', 'D(-1)', 'E(-1)', 'F(-1)', 'I(+1)', 'J(+1)', 'G(-3)']
Pattern: TYPE 2 - Flip Pattern (Pos: [4, 1, 1], Neg: [-1, -1, -1, -3])

--- INVERSION 5 ---
Type: flip
Flip indicator: 1
Segment length: 2
Positions: [3, 4]
Genes: ['D', 'H']
Gene inversions: 2
Sequence after inversion: ['A', 'B', 'C', 'D', 'H', 'E', 'F', 'I', 'J', 'G']
Movements: ['+0', '+0', '+0', '+0', '+3', '-1', '-1', '+1', '+1', '-3']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'H(+3)', 'E(-1)', 'F(-1)', 'I(+1)', 'J(+1)', 'G(-3)']
Pattern: TYPE 2 - Flip Pattern (Pos: [3, 1, 1], Neg: [-1, -1, -3])

--- INVERSION 6 ---
Type: adjacency
Adjacency positions: [4, 5]
Genes: ['H', 'E']
Sequence after inversion: ['A', 'B', 'C', 'D', 'E', 'H', 'F', 'I', 'J', 'G']
Movements: ['+0', '+0', '+0', '+0', '+0', '+2', '-1', '+1', '+1', '-3']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'E(+0)', 'H(+2)', 'F(-1)', 'I(+1)', 'J(+1)', 'G(-3)']
Pattern: TYPE 2 - Flip Pattern (Pos: [2, 1, 1], Neg: [-1, -3])

--- INVERSION 7 ---
Type: adjacency
Adjacency positions: [8, 9]
Genes: ['J', 'G']
Sequence after inversion: ['A', 'B', 'C', 'D', 'E', 'H', 'F', 'I', 'G', 'J']
Movements: ['+0', '+0', '+0', '+0', '+0', '+2', '-1', '+1', '-2', '+0']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'E(+0)', 'H(+2)', 'F(-1)', 'I(+1)', 'G(-2)', 'J(+0)']
Pattern: TYPE 2 - Flip Pattern (Pos: [2, 1], Neg: [-1, -2])

--- INVERSION 8 ---
Type: flip
Flip indicator: 1
Segment length: 2
Positions: [5, 6]
Genes: ['F', 'H']
Gene inversions: 2
Sequence after inversion: ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'I', 'G', 'J']
Movements: ['+0', '+0', '+0', '+0', '+0', '+0', '+1', '+1', '-2', '+0']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'E(+0)', 'F(+0)', 'H(+1)', 'I(+1)', 'G(-2)', 'J(+0)']
Pattern: TYPE 2 - Flip Pattern (Pos: [1, 1], Neg: [-2])

--- INVERSION 9 ---
Type: flip
Flip indicator: 1
Segment length: 2
Positions: [7, 8]
Genes: ['G', 'I']
Gene inversions: 2
Sequence after inversion: ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'G', 'I', 'J']
Movements: ['+0', '+0', '+0', '+0', '+0', '+0', '+1', '-1', '+0', '+0']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'E(+0)', 'F(+0)', 'H(+1)', 'G(-1)', 'I(+0)', 'J(+0)']
Pattern: TYPE 1 - Perfect Adjacency

--- INVERSION 10 ---
Type: flip
Flip indicator: 1
Segment length: 2
Positions: [6, 7]
Genes: ['G', 'H']
Gene inversions: 2
Sequence after inversion: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
Movements: ['+0', '+0', '+0', '+0', '+0', '+0', '+0', '+0', '+0', '+0']
Formatted: ['A(+0)', 'B(+0)', 'C(+0)', 'D(+0)', 'E(+0)', 'F(+0)', 'G(+0)', 'H(+0)', 'I(+0)', 'J(+0)']
Pattern: Converged or Minimal
COMPLETE SEQUENCE TRACKER
==================================================
Iter 0:  H   I─  J   A  ─B   F   E   D   C   G
         │     ── │ │ ──     │   │   │   │   │
         │       ─────       │   │   │   │   │
         │       ──│──       │   │   │   │   │
         │     ── │ │ ──     │   │   │   │   │
Iter 1:  H   B─  A   J─ ─I   F   E   D  ─C   G
         │   │   │     ─────  │ │  ─────     │
         │   │   │        ────│ │────        │
         │   │   │           ─────           │
         │   │   │           ──│──           │
         │   │   │        ────│ │────        │
         │   │   │     ─────  │ │  ─────     │
Iter 2:  H─  B  ─A   C─  D   E   F   I  ─J   G
           ─ │ ─     │   │   │   │   │   │   │
            ─│─      │   │   │   │   │   │   │
           ─ │ ─     │   │   │   │   │   │   │
Iter 3:  A─  B  ─H   C   D   E   F   I   J   G
         │   │    ╲ ╱    │   │   │   │   │   │
         │   │     ╱     │   │   │   │   │   │
         │   │    ╱ ╲    │   │   │   │   │   │
Iter 4:  A   B   C   H   D   E   F   I   J   G
         │   │   │    ╲ ╱    │   │   │   │   │
         │   │   │     ╱     │   │   │   │   │
         │   │   │    ╱ ╲    │   │   │   │   │
Iter 5:  A   B   C   D   H   E   F   I   J   G
         │   │   │   │    ╲ ╱    │   │   │   │
         │   │   │   │     ╱     │   │   │   │
         │   │   │   │    ╱ ╲    │   │   │   │
Iter 6:  A   B   C   D   E   H   F   I   J   G
         │   │   │   │   │   │   │   │    ╲ ╱
         │   │   │   │   │   │   │   │     ╱
         │   │   │   │   │   │   │   │    ╱ ╲
Iter 7:  A   B   C   D   E   H   F   I   G   J
         │   │   │   │   │    ╲ ╱    │   │   │
         │   │   │   │   │     ╱     │   │   │
         │   │   │   │   │    ╱ ╲    │   │   │
Iter 8:  A   B   C   D   E   F   H   I   G   J
         │   │   │   │   │   │   │    ╲ ╱    │
         │   │   │   │   │   │   │     ╱     │
         │   │   │   │   │   │   │    ╱ ╲    │
Iter 9:  A   B   C   D   E   F   H   G   I   J
         │   │   │   │   │   │    ╲ ╱    │   │
         │   │   │   │   │   │     ╱     │   │
         │   │   │   │   │   │    ╱ ╲    │   │
Iter 10:  A   B   C   D   E   F   G   H   I   J
